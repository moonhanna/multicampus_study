
ttt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800268c  0800268c  0001268c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080026e4  080026e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  080026f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  8 .bss          000000cc  20000078  20000078  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000144  20000144  00020078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000bf23  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001bdd  00000000  00000000  0002bfcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000056f2  00000000  00000000  0002dba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000788  00000000  00000000  000332a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  00033a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004b77  00000000  00000000  00034500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003208  00000000  00000000  00039077  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003c27f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001910  00000000  00000000  0003c2fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002674 	.word	0x08002674

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08002674 	.word	0x08002674

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_InitTick+0x3c>)
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_InitTick+0x40>)
{
 80005b6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b8:	7818      	ldrb	r0, [r3, #0]
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	fbb3 f3f0 	udiv	r3, r3, r0
 80005c2:	6810      	ldr	r0, [r2, #0]
 80005c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005c8:	f000 f89c 	bl	8000704 <HAL_SYSTICK_Config>
 80005cc:	4604      	mov	r4, r0
 80005ce:	b958      	cbnz	r0, 80005e8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d0:	2d0f      	cmp	r5, #15
 80005d2:	d809      	bhi.n	80005e8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d4:	4602      	mov	r2, r0
 80005d6:	4629      	mov	r1, r5
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295
 80005dc:	f000 f85e 	bl	800069c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <HAL_InitTick+0x44>)
 80005e2:	4620      	mov	r0, r4
 80005e4:	601d      	str	r5, [r3, #0]
 80005e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005e8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20000010 	.word	0x20000010
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000004 	.word	0x20000004

080005f8 <HAL_Init>:
{
 80005f8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <HAL_Init+0x30>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000602:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800060a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000612:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 f82f 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff ffc8 	bl	80005b0 <HAL_InitTick>
  HAL_MspInit();
 8000620:	f001 faca 	bl	8001bb8 <HAL_MspInit>
}
 8000624:	2000      	movs	r0, #0
 8000626:	bd08      	pop	{r3, pc}
 8000628:	40023c00 	.word	0x40023c00

0800062c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <HAL_IncTick+0x10>)
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <HAL_IncTick+0x14>)
 8000630:	6811      	ldr	r1, [r2, #0]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	440b      	add	r3, r1
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	200000a8 	.word	0x200000a8
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <HAL_GetTick+0x8>)
 8000646:	6818      	ldr	r0, [r3, #0]
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200000a8 	.word	0x200000a8

08000650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000650:	b538      	push	{r3, r4, r5, lr}
 8000652:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000654:	f7ff fff6 	bl	8000644 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000658:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800065a:	bf1c      	itt	ne
 800065c:	4b05      	ldrne	r3, [pc, #20]	; (8000674 <HAL_Delay+0x24>)
 800065e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000660:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000662:	bf18      	it	ne
 8000664:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000666:	f7ff ffed 	bl	8000644 <HAL_GetTick>
 800066a:	1b40      	subs	r0, r0, r5
 800066c:	4284      	cmp	r4, r0
 800066e:	d8fa      	bhi.n	8000666 <HAL_Delay+0x16>
  {
  }
}
 8000670:	bd38      	pop	{r3, r4, r5, pc}
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800067a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000680:	041b      	lsls	r3, r3, #16
 8000682:	0c1b      	lsrs	r3, r3, #16
 8000684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	0200      	lsls	r0, r0, #8
 800068a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000692:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000694:	60d3      	str	r3, [r2, #12]
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	68dc      	ldr	r4, [r3, #12]
 80006a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	bf28      	it	cs
 80006b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 0501 	mov.w	r5, #1
 80006b8:	fa05 f303 	lsl.w	r3, r5, r3
 80006bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c0:	bf8c      	ite	hi
 80006c2:	3c03      	subhi	r4, #3
 80006c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c6:	4019      	ands	r1, r3
 80006c8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ca:	fa05 f404 	lsl.w	r4, r5, r4
 80006ce:	3c01      	subs	r4, #1
 80006d0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	ea42 0201 	orr.w	r2, r2, r1
 80006d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	bfad      	iteet	ge
 80006de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	f000 000f 	andlt.w	r0, r0, #15
 80006e6:	4b06      	ldrlt	r3, [pc, #24]	; (8000700 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	bfb5      	itete	lt
 80006ee:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	e000ed14 	.word	0xe000ed14

08000704 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000704:	3801      	subs	r0, #1
 8000706:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800070a:	d20a      	bcs.n	8000722 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	4a07      	ldr	r2, [pc, #28]	; (800072c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000710:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	21f0      	movs	r1, #240	; 0xf0
 8000714:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e010 	.word	0xe000e010
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000734:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000736:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000738:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000900 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800073c:	4a6e      	ldr	r2, [pc, #440]	; (80008f8 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800073e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000904 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000742:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000744:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000746:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000748:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800074a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800074e:	42ac      	cmp	r4, r5
 8000750:	f040 80b8 	bne.w	80008c4 <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000754:	684c      	ldr	r4, [r1, #4]
 8000756:	f024 0c10 	bic.w	ip, r4, #16
 800075a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800075e:	2e01      	cmp	r6, #1
 8000760:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000764:	d812      	bhi.n	800078c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000766:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000768:	2603      	movs	r6, #3
 800076a:	fa06 f60e 	lsl.w	r6, r6, lr
 800076e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000772:	68ce      	ldr	r6, [r1, #12]
 8000774:	fa06 f60e 	lsl.w	r6, r6, lr
 8000778:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800077a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800077c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800077e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000782:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000786:	409e      	lsls	r6, r3
 8000788:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800078a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800078c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800078e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000790:	fa06 f60e 	lsl.w	r6, r6, lr
 8000794:	43f6      	mvns	r6, r6
 8000796:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800079a:	688f      	ldr	r7, [r1, #8]
 800079c:	fa07 f70e 	lsl.w	r7, r7, lr
 80007a0:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007a4:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80007a8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007aa:	d116      	bne.n	80007da <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80007ac:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80007b0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007b4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80007b8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007bc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007c0:	f04f 0c0f 	mov.w	ip, #15
 80007c4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007c8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007cc:	690f      	ldr	r7, [r1, #16]
 80007ce:	fa07 f70b 	lsl.w	r7, r7, fp
 80007d2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007d6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80007da:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007dc:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007de:	f004 0703 	and.w	r7, r4, #3
 80007e2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80007e6:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80007ea:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007ec:	00e6      	lsls	r6, r4, #3
 80007ee:	d569      	bpl.n	80008c4 <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f0:	f04f 0b00 	mov.w	fp, #0
 80007f4:	f8cd b00c 	str.w	fp, [sp, #12]
 80007f8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007fc:	4e3f      	ldr	r6, [pc, #252]	; (80008fc <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000802:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000806:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800080a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800080e:	9703      	str	r7, [sp, #12]
 8000810:	9f03      	ldr	r7, [sp, #12]
 8000812:	f023 0703 	bic.w	r7, r3, #3
 8000816:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800081a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800081e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000822:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000826:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800082a:	f04f 0e0f 	mov.w	lr, #15
 800082e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000832:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000834:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000838:	d04b      	beq.n	80008d2 <HAL_GPIO_Init+0x1a2>
 800083a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800083e:	42b0      	cmp	r0, r6
 8000840:	d049      	beq.n	80008d6 <HAL_GPIO_Init+0x1a6>
 8000842:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000846:	42b0      	cmp	r0, r6
 8000848:	d047      	beq.n	80008da <HAL_GPIO_Init+0x1aa>
 800084a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800084e:	42b0      	cmp	r0, r6
 8000850:	d045      	beq.n	80008de <HAL_GPIO_Init+0x1ae>
 8000852:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000856:	42b0      	cmp	r0, r6
 8000858:	d043      	beq.n	80008e2 <HAL_GPIO_Init+0x1b2>
 800085a:	4548      	cmp	r0, r9
 800085c:	d043      	beq.n	80008e6 <HAL_GPIO_Init+0x1b6>
 800085e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000862:	42b0      	cmp	r0, r6
 8000864:	d041      	beq.n	80008ea <HAL_GPIO_Init+0x1ba>
 8000866:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800086a:	42b0      	cmp	r0, r6
 800086c:	d03f      	beq.n	80008ee <HAL_GPIO_Init+0x1be>
 800086e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000872:	42b0      	cmp	r0, r6
 8000874:	d03d      	beq.n	80008f2 <HAL_GPIO_Init+0x1c2>
 8000876:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800087a:	42b0      	cmp	r0, r6
 800087c:	bf14      	ite	ne
 800087e:	260a      	movne	r6, #10
 8000880:	2609      	moveq	r6, #9
 8000882:	fa06 f60c 	lsl.w	r6, r6, ip
 8000886:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800088a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800088c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800088e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000890:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000894:	bf0c      	ite	eq
 8000896:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000898:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800089a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800089c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800089e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008a2:	bf0c      	ite	eq
 80008a4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008a6:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80008a8:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008aa:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ac:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008b0:	bf0c      	ite	eq
 80008b2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008b4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80008b6:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80008b8:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ba:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008bc:	bf54      	ite	pl
 80008be:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80008c0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80008c2:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008c4:	3301      	adds	r3, #1
 80008c6:	2b10      	cmp	r3, #16
 80008c8:	f47f af3d 	bne.w	8000746 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008cc:	b005      	add	sp, #20
 80008ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008d2:	465e      	mov	r6, fp
 80008d4:	e7d5      	b.n	8000882 <HAL_GPIO_Init+0x152>
 80008d6:	2601      	movs	r6, #1
 80008d8:	e7d3      	b.n	8000882 <HAL_GPIO_Init+0x152>
 80008da:	2602      	movs	r6, #2
 80008dc:	e7d1      	b.n	8000882 <HAL_GPIO_Init+0x152>
 80008de:	2603      	movs	r6, #3
 80008e0:	e7cf      	b.n	8000882 <HAL_GPIO_Init+0x152>
 80008e2:	2604      	movs	r6, #4
 80008e4:	e7cd      	b.n	8000882 <HAL_GPIO_Init+0x152>
 80008e6:	2605      	movs	r6, #5
 80008e8:	e7cb      	b.n	8000882 <HAL_GPIO_Init+0x152>
 80008ea:	2606      	movs	r6, #6
 80008ec:	e7c9      	b.n	8000882 <HAL_GPIO_Init+0x152>
 80008ee:	2607      	movs	r6, #7
 80008f0:	e7c7      	b.n	8000882 <HAL_GPIO_Init+0x152>
 80008f2:	2608      	movs	r6, #8
 80008f4:	e7c5      	b.n	8000882 <HAL_GPIO_Init+0x152>
 80008f6:	bf00      	nop
 80008f8:	40013c00 	.word	0x40013c00
 80008fc:	40020000 	.word	0x40020000
 8000900:	40023800 	.word	0x40023800
 8000904:	40021400 	.word	0x40021400

08000908 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000908:	b10a      	cbz	r2, 800090e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800090a:	6181      	str	r1, [r0, #24]
 800090c:	4770      	bx	lr
 800090e:	0409      	lsls	r1, r1, #16
 8000910:	e7fb      	b.n	800090a <HAL_GPIO_WritePin+0x2>

08000912 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000912:	6801      	ldr	r1, [r0, #0]
 8000914:	694b      	ldr	r3, [r1, #20]
 8000916:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800091a:	f04f 0200 	mov.w	r2, #0
 800091e:	d010      	beq.n	8000942 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000920:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000924:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000926:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000928:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800092a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800092e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000932:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000934:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800093e:	2001      	movs	r0, #1
 8000940:	4770      	bx	lr
  }
  return HAL_OK;
 8000942:	4618      	mov	r0, r3
}
 8000944:	4770      	bx	lr

08000946 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000946:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800094a:	4604      	mov	r4, r0
 800094c:	4617      	mov	r7, r2
 800094e:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000950:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000954:	b28e      	uxth	r6, r1
 8000956:	6825      	ldr	r5, [r4, #0]
 8000958:	f1b8 0f01 	cmp.w	r8, #1
 800095c:	bf0c      	ite	eq
 800095e:	696b      	ldreq	r3, [r5, #20]
 8000960:	69ab      	ldrne	r3, [r5, #24]
 8000962:	ea36 0303 	bics.w	r3, r6, r3
 8000966:	bf14      	ite	ne
 8000968:	2001      	movne	r0, #1
 800096a:	2000      	moveq	r0, #0
 800096c:	b908      	cbnz	r0, 8000972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800096e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000972:	696b      	ldr	r3, [r5, #20]
 8000974:	055a      	lsls	r2, r3, #21
 8000976:	d516      	bpl.n	80009a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000978:	682b      	ldr	r3, [r5, #0]
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000980:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000984:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000986:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000988:	2300      	movs	r3, #0
 800098a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800098c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000990:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000994:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000996:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800099a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800099c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80009a0:	2001      	movs	r0, #1
 80009a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80009a6:	1c7b      	adds	r3, r7, #1
 80009a8:	d0d5      	beq.n	8000956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009aa:	f7ff fe4b 	bl	8000644 <HAL_GetTick>
 80009ae:	eba0 0009 	sub.w	r0, r0, r9
 80009b2:	4287      	cmp	r7, r0
 80009b4:	d301      	bcc.n	80009ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 80009b6:	2f00      	cmp	r7, #0
 80009b8:	d1cd      	bne.n	8000956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80009ba:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80009bc:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80009be:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80009c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80009c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009ca:	f042 0220 	orr.w	r2, r2, #32
 80009ce:	e7e4      	b.n	800099a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

080009d0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	4604      	mov	r4, r0
 80009d4:	460d      	mov	r5, r1
 80009d6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80009d8:	6823      	ldr	r3, [r4, #0]
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	075b      	lsls	r3, r3, #29
 80009de:	d501      	bpl.n	80009e4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80009e0:	2000      	movs	r0, #0
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80009e4:	4620      	mov	r0, r4
 80009e6:	f7ff ff94 	bl	8000912 <I2C_IsAcknowledgeFailed>
 80009ea:	b9a8      	cbnz	r0, 8000a18 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80009ec:	1c6a      	adds	r2, r5, #1
 80009ee:	d0f3      	beq.n	80009d8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009f0:	f7ff fe28 	bl	8000644 <HAL_GetTick>
 80009f4:	1b80      	subs	r0, r0, r6
 80009f6:	4285      	cmp	r5, r0
 80009f8:	d301      	bcc.n	80009fe <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d1ec      	bne.n	80009d8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80009fe:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a00:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a02:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a04:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000a0e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a12:	f042 0220 	orr.w	r2, r2, #32
 8000a16:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000a18:	2001      	movs	r0, #1
}
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}

08000a1c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	4604      	mov	r4, r0
 8000a20:	460d      	mov	r5, r1
 8000a22:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000a24:	6820      	ldr	r0, [r4, #0]
 8000a26:	6943      	ldr	r3, [r0, #20]
 8000a28:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000a2c:	d001      	beq.n	8000a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000a2e:	2000      	movs	r0, #0
}
 8000a30:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000a32:	6942      	ldr	r2, [r0, #20]
 8000a34:	06d2      	lsls	r2, r2, #27
 8000a36:	d50e      	bpl.n	8000a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a38:	f06f 0210 	mvn.w	r2, #16
 8000a3c:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a3e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a40:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a42:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a46:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000a4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a4c:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000a4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000a52:	2001      	movs	r0, #1
 8000a54:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a56:	f7ff fdf5 	bl	8000644 <HAL_GetTick>
 8000a5a:	1b80      	subs	r0, r0, r6
 8000a5c:	42a8      	cmp	r0, r5
 8000a5e:	d801      	bhi.n	8000a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d1df      	bne.n	8000a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a64:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a66:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a68:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a6a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a6e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a74:	f042 0220 	orr.w	r2, r2, #32
 8000a78:	e7e8      	b.n	8000a4c <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08000a7a <I2C_WaitOnFlagUntilTimeout>:
{
 8000a7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a7e:	9e08      	ldr	r6, [sp, #32]
 8000a80:	4604      	mov	r4, r0
 8000a82:	4690      	mov	r8, r2
 8000a84:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000a86:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000a8a:	b28d      	uxth	r5, r1
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	f1b9 0f01 	cmp.w	r9, #1
 8000a92:	bf0c      	ite	eq
 8000a94:	695b      	ldreq	r3, [r3, #20]
 8000a96:	699b      	ldrne	r3, [r3, #24]
 8000a98:	ea35 0303 	bics.w	r3, r5, r3
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2301      	moveq	r3, #1
 8000aa0:	2300      	movne	r3, #0
 8000aa2:	4543      	cmp	r3, r8
 8000aa4:	d002      	beq.n	8000aac <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000aa6:	2000      	movs	r0, #0
}
 8000aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000aac:	1c7b      	adds	r3, r7, #1
 8000aae:	d0ed      	beq.n	8000a8c <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ab0:	f7ff fdc8 	bl	8000644 <HAL_GetTick>
 8000ab4:	1b80      	subs	r0, r0, r6
 8000ab6:	4287      	cmp	r7, r0
 8000ab8:	d301      	bcc.n	8000abe <I2C_WaitOnFlagUntilTimeout+0x44>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d1e6      	bne.n	8000a8c <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000abe:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000ac0:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000ac2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000ac4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000ac8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000acc:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000ace:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ad2:	f042 0220 	orr.w	r2, r2, #32
 8000ad6:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000ade <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000ade:	b570      	push	{r4, r5, r6, lr}
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ae6:	6823      	ldr	r3, [r4, #0]
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	061b      	lsls	r3, r3, #24
 8000aec:	d501      	bpl.n	8000af2 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000aee:	2000      	movs	r0, #0
 8000af0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000af2:	4620      	mov	r0, r4
 8000af4:	f7ff ff0d 	bl	8000912 <I2C_IsAcknowledgeFailed>
 8000af8:	b9a8      	cbnz	r0, 8000b26 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000afa:	1c6a      	adds	r2, r5, #1
 8000afc:	d0f3      	beq.n	8000ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000afe:	f7ff fda1 	bl	8000644 <HAL_GetTick>
 8000b02:	1b80      	subs	r0, r0, r6
 8000b04:	4285      	cmp	r5, r0
 8000b06:	d301      	bcc.n	8000b0c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d1ec      	bne.n	8000ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000b0c:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000b0e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000b10:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000b12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b16:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000b1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b20:	f042 0220 	orr.w	r2, r2, #32
 8000b24:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000b26:	2001      	movs	r0, #1
}
 8000b28:	bd70      	pop	{r4, r5, r6, pc}
	...

08000b2c <HAL_I2C_Init>:
{
 8000b2c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000b2e:	4604      	mov	r4, r0
 8000b30:	b908      	cbnz	r0, 8000b36 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000b32:	2001      	movs	r0, #1
 8000b34:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000b3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b3e:	b91b      	cbnz	r3, 8000b48 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000b40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000b44:	f001 f854 	bl	8001bf0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b48:	2324      	movs	r3, #36	; 0x24
 8000b4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	f022 0201 	bic.w	r2, r2, #1
 8000b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b66:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b68:	f000 fd82 	bl	8001670 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b6c:	6865      	ldr	r5, [r4, #4]
 8000b6e:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <HAL_I2C_Init+0x148>)
 8000b70:	429d      	cmp	r5, r3
 8000b72:	d84d      	bhi.n	8000c10 <HAL_I2C_Init+0xe4>
 8000b74:	4b40      	ldr	r3, [pc, #256]	; (8000c78 <HAL_I2C_Init+0x14c>)
 8000b76:	4298      	cmp	r0, r3
 8000b78:	d9db      	bls.n	8000b32 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b7a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000b7c:	493f      	ldr	r1, [pc, #252]	; (8000c7c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b7e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000b80:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b8c:	6a13      	ldr	r3, [r2, #32]
 8000b8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b92:	3101      	adds	r1, #1
 8000b94:	4319      	orrs	r1, r3
 8000b96:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b98:	69d1      	ldr	r1, [r2, #28]
 8000b9a:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <HAL_I2C_Init+0x148>)
 8000b9c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000ba0:	429d      	cmp	r5, r3
 8000ba2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000ba6:	f100 30ff 	add.w	r0, r0, #4294967295
 8000baa:	d848      	bhi.n	8000c3e <HAL_I2C_Init+0x112>
 8000bac:	006d      	lsls	r5, r5, #1
 8000bae:	fbb0 f0f5 	udiv	r0, r0, r5
 8000bb2:	3001      	adds	r0, #1
 8000bb4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	bf38      	it	cc
 8000bbc:	2304      	movcc	r3, #4
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000bc2:	6811      	ldr	r1, [r2, #0]
 8000bc4:	6a20      	ldr	r0, [r4, #32]
 8000bc6:	69e3      	ldr	r3, [r4, #28]
 8000bc8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000bcc:	4303      	orrs	r3, r0
 8000bce:	430b      	orrs	r3, r1
 8000bd0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000bd2:	6891      	ldr	r1, [r2, #8]
 8000bd4:	68e0      	ldr	r0, [r4, #12]
 8000bd6:	6923      	ldr	r3, [r4, #16]
 8000bd8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000bdc:	4303      	orrs	r3, r0
 8000bde:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000be2:	430b      	orrs	r3, r1
 8000be4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000be6:	68d1      	ldr	r1, [r2, #12]
 8000be8:	69a0      	ldr	r0, [r4, #24]
 8000bea:	6963      	ldr	r3, [r4, #20]
 8000bec:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000bf0:	4303      	orrs	r3, r0
 8000bf2:	430b      	orrs	r3, r1
 8000bf4:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000bf6:	6813      	ldr	r3, [r2, #0]
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bfe:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000c00:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c02:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000c04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c08:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c0a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000c0e:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_I2C_Init+0x154>)
 8000c12:	4298      	cmp	r0, r3
 8000c14:	d98d      	bls.n	8000b32 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c16:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000c18:	4e18      	ldr	r6, [pc, #96]	; (8000c7c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c1a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000c1c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c24:	4333      	orrs	r3, r6
 8000c26:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c28:	6a13      	ldr	r3, [r2, #32]
 8000c2a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c2e:	4371      	muls	r1, r6
 8000c30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c34:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000c38:	fbb1 f1f6 	udiv	r1, r1, r6
 8000c3c:	e7a9      	b.n	8000b92 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c3e:	68a3      	ldr	r3, [r4, #8]
 8000c40:	b953      	cbnz	r3, 8000c58 <HAL_I2C_Init+0x12c>
 8000c42:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000c46:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c4a:	1c43      	adds	r3, r0, #1
 8000c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c50:	b16b      	cbz	r3, 8000c6e <HAL_I2C_Init+0x142>
 8000c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c56:	e7b2      	b.n	8000bbe <HAL_I2C_Init+0x92>
 8000c58:	2319      	movs	r3, #25
 8000c5a:	436b      	muls	r3, r5
 8000c5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c60:	1c43      	adds	r3, r0, #1
 8000c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c66:	b113      	cbz	r3, 8000c6e <HAL_I2C_Init+0x142>
 8000c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c6c:	e7a7      	b.n	8000bbe <HAL_I2C_Init+0x92>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e7a5      	b.n	8000bbe <HAL_I2C_Init+0x92>
 8000c72:	bf00      	nop
 8000c74:	000186a0 	.word	0x000186a0
 8000c78:	001e847f 	.word	0x001e847f
 8000c7c:	000f4240 	.word	0x000f4240
 8000c80:	003d08ff 	.word	0x003d08ff

08000c84 <HAL_I2C_Master_Transmit>:
{
 8000c84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000c88:	4604      	mov	r4, r0
 8000c8a:	461f      	mov	r7, r3
 8000c8c:	460d      	mov	r5, r1
 8000c8e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff fcd8 	bl	8000644 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c94:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000c98:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8000c9a:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c9c:	d004      	beq.n	8000ca8 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000c9e:	2502      	movs	r5, #2
}
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	b004      	add	sp, #16
 8000ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ca8:	9000      	str	r0, [sp, #0]
 8000caa:	2319      	movs	r3, #25
 8000cac:	2201      	movs	r2, #1
 8000cae:	495b      	ldr	r1, [pc, #364]	; (8000e1c <HAL_I2C_Master_Transmit+0x198>)
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	f7ff fee2 	bl	8000a7a <I2C_WaitOnFlagUntilTimeout>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	d1f1      	bne.n	8000c9e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000cba:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d0ed      	beq.n	8000c9e <HAL_I2C_Master_Transmit+0x1a>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000cce:	bf5e      	ittt	pl
 8000cd0:	681a      	ldrpl	r2, [r3, #0]
 8000cd2:	f042 0201 	orrpl.w	r2, r2, #1
 8000cd6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cde:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000ce0:	2221      	movs	r2, #33	; 0x21
 8000ce2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000ce6:	2210      	movs	r2, #16
 8000ce8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000cec:	2200      	movs	r2, #0
 8000cee:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000cf0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000cf2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000cf4:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000cf6:	4a4a      	ldr	r2, [pc, #296]	; (8000e20 <HAL_I2C_Master_Transmit+0x19c>)
 8000cf8:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000cfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8000cfc:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000d00:	2a08      	cmp	r2, #8
 8000d02:	d004      	beq.n	8000d0e <HAL_I2C_Master_Transmit+0x8a>
 8000d04:	2a01      	cmp	r2, #1
 8000d06:	d002      	beq.n	8000d0e <HAL_I2C_Master_Transmit+0x8a>
 8000d08:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000d0c:	d104      	bne.n	8000d18 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e002      	b.n	8000d1e <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000d18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000d1a:	2a12      	cmp	r2, #18
 8000d1c:	d0f7      	beq.n	8000d0e <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	9600      	str	r6, [sp, #0]
 8000d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f7ff fea6 	bl	8000a7a <I2C_WaitOnFlagUntilTimeout>
 8000d2e:	6822      	ldr	r2, [r4, #0]
 8000d30:	b138      	cbz	r0, 8000d42 <HAL_I2C_Master_Transmit+0xbe>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8000d32:	6813      	ldr	r3, [r2, #0]
 8000d34:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000d36:	bf44      	itt	mi
 8000d38:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8000d3c:	6423      	strmi	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8000d3e:	2501      	movs	r5, #1
 8000d40:	e7ae      	b.n	8000ca0 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d42:	6923      	ldr	r3, [r4, #16]
 8000d44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d48:	d113      	bne.n	8000d72 <HAL_I2C_Master_Transmit+0xee>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000d4a:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000d4e:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000d50:	4633      	mov	r3, r6
 8000d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000d54:	4933      	ldr	r1, [pc, #204]	; (8000e24 <HAL_I2C_Master_Transmit+0x1a0>)
 8000d56:	4620      	mov	r0, r4
 8000d58:	f7ff fdf5 	bl	8000946 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000d5c:	4605      	mov	r5, r0
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	d1ed      	bne.n	8000d3e <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	9003      	str	r0, [sp, #12]
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	9203      	str	r2, [sp, #12]
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	9303      	str	r3, [sp, #12]
 8000d6e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000d70:	e044      	b.n	8000dfc <HAL_I2C_Master_Transmit+0x178>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000d72:	11eb      	asrs	r3, r5, #7
 8000d74:	f003 0306 	and.w	r3, r3, #6
 8000d78:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000d7c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000d7e:	492a      	ldr	r1, [pc, #168]	; (8000e28 <HAL_I2C_Master_Transmit+0x1a4>)
 8000d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000d82:	4633      	mov	r3, r6
 8000d84:	4620      	mov	r0, r4
 8000d86:	f7ff fdde 	bl	8000946 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000d8a:	2800      	cmp	r0, #0
 8000d8c:	d1d7      	bne.n	8000d3e <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000d8e:	6823      	ldr	r3, [r4, #0]
 8000d90:	b2ed      	uxtb	r5, r5
 8000d92:	611d      	str	r5, [r3, #16]
 8000d94:	e7dc      	b.n	8000d50 <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d96:	4632      	mov	r2, r6
 8000d98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f7ff fe9f 	bl	8000ade <I2C_WaitOnTXEFlagUntilTimeout>
 8000da0:	b140      	cbz	r0, 8000db4 <HAL_I2C_Master_Transmit+0x130>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000da2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000da4:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000da6:	bf01      	itttt	eq
 8000da8:	6822      	ldreq	r2, [r4, #0]
 8000daa:	6813      	ldreq	r3, [r2, #0]
 8000dac:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000db0:	6013      	streq	r3, [r2, #0]
 8000db2:	e7c4      	b.n	8000d3e <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000db6:	6820      	ldr	r0, [r4, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000dbe:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8000dc0:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000dc2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	b292      	uxth	r2, r2
 8000dc8:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000dca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000dcc:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000dce:	1e51      	subs	r1, r2, #1
 8000dd0:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000dd2:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000dd4:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000dd6:	d50a      	bpl.n	8000dee <HAL_I2C_Master_Transmit+0x16a>
 8000dd8:	b149      	cbz	r1, 8000dee <HAL_I2C_Master_Transmit+0x16a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000dda:	7859      	ldrb	r1, [r3, #1]
 8000ddc:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8000dde:	3302      	adds	r3, #2
 8000de0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8000de2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000de4:	3b01      	subs	r3, #1
 8000de6:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8000de8:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000dea:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000dec:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dee:	4632      	mov	r2, r6
 8000df0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff fdec 	bl	80009d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	d1d2      	bne.n	8000da2 <HAL_I2C_Master_Transmit+0x11e>
    while (hi2c->XferSize > 0U)
 8000dfc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1c9      	bne.n	8000d96 <HAL_I2C_Master_Transmit+0x112>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e02:	6821      	ldr	r1, [r4, #0]
 8000e04:	680a      	ldr	r2, [r1, #0]
 8000e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e0a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000e0c:	2220      	movs	r2, #32
 8000e0e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000e12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e16:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000e1a:	e741      	b.n	8000ca0 <HAL_I2C_Master_Transmit+0x1c>
 8000e1c:	00100002 	.word	0x00100002
 8000e20:	ffff0000 	.word	0xffff0000
 8000e24:	00010002 	.word	0x00010002
 8000e28:	00010008 	.word	0x00010008

08000e2c <HAL_I2C_Master_Receive>:
{
 8000e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e30:	4604      	mov	r4, r0
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	4698      	mov	r8, r3
 8000e36:	460e      	mov	r6, r1
 8000e38:	4691      	mov	r9, r2
 8000e3a:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff fc02 	bl	8000644 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e40:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000e44:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8000e46:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e48:	d004      	beq.n	8000e54 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8000e4a:	2602      	movs	r6, #2
}
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	b009      	add	sp, #36	; 0x24
 8000e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e54:	9000      	str	r0, [sp, #0]
 8000e56:	2319      	movs	r3, #25
 8000e58:	2201      	movs	r2, #1
 8000e5a:	499b      	ldr	r1, [pc, #620]	; (80010c8 <HAL_I2C_Master_Receive+0x29c>)
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f7ff fe0c 	bl	8000a7a <I2C_WaitOnFlagUntilTimeout>
 8000e62:	2800      	cmp	r0, #0
 8000e64:	d1f1      	bne.n	8000e4a <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8000e66:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d0ed      	beq.n	8000e4a <HAL_I2C_Master_Receive+0x1e>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000e7a:	bf5e      	ittt	pl
 8000e7c:	681a      	ldrpl	r2, [r3, #0]
 8000e7e:	f042 0201 	orrpl.w	r2, r2, #1
 8000e82:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e8a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000e8c:	2222      	movs	r2, #34	; 0x22
 8000e8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e92:	2210      	movs	r2, #16
 8000e94:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000e9c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ea0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000ea2:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ea4:	4a89      	ldr	r2, [pc, #548]	; (80010cc <HAL_I2C_Master_Receive+0x2a0>)
 8000ea6:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000ea8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000eaa:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 8000eac:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000eb0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000eb4:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000eb6:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000eb8:	d004      	beq.n	8000ec4 <HAL_I2C_Master_Receive+0x98>
 8000eba:	2a01      	cmp	r2, #1
 8000ebc:	d002      	beq.n	8000ec4 <HAL_I2C_Master_Receive+0x98>
 8000ebe:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000ec2:	d104      	bne.n	8000ece <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	e002      	b.n	8000ed4 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8000ece:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ed0:	2a11      	cmp	r2, #17
 8000ed2:	d0f7      	beq.n	8000ec4 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	9500      	str	r5, [sp, #0]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f7ff fdcb 	bl	8000a7a <I2C_WaitOnFlagUntilTimeout>
 8000ee4:	6823      	ldr	r3, [r4, #0]
 8000ee6:	b138      	cbz	r0, 8000ef8 <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8000ee8:	681b      	ldr	r3, [r3, #0]
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8000eea:	05d8      	lsls	r0, r3, #23
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000eec:	bf44      	itt	mi
 8000eee:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8000ef2:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000ef4:	2601      	movs	r6, #1
 8000ef6:	e7a9      	b.n	8000e4c <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ef8:	6922      	ldr	r2, [r4, #16]
 8000efa:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8000efe:	d140      	bne.n	8000f82 <HAL_I2C_Master_Receive+0x156>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000f00:	f046 0601 	orr.w	r6, r6, #1
 8000f04:	b2f6      	uxtb	r6, r6
 8000f06:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f08:	462b      	mov	r3, r5
 8000f0a:	463a      	mov	r2, r7
 8000f0c:	4970      	ldr	r1, [pc, #448]	; (80010d0 <HAL_I2C_Master_Receive+0x2a4>)
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f7ff fd19 	bl	8000946 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f14:	4606      	mov	r6, r0
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d1ec      	bne.n	8000ef4 <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 8000f1a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	d064      	beq.n	8000fec <HAL_I2C_Master_Receive+0x1c0>
    else if (hi2c->XferSize == 1U)
 8000f22:	2a01      	cmp	r2, #1
 8000f24:	d175      	bne.n	8001012 <HAL_I2C_Master_Receive+0x1e6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f2c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f2e:	9604      	str	r6, [sp, #16]
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	9204      	str	r2, [sp, #16]
 8000f34:	699a      	ldr	r2, [r3, #24]
 8000f36:	9204      	str	r2, [sp, #16]
 8000f38:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f40:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000f42:	f8df 8194 	ldr.w	r8, [pc, #404]	; 80010d8 <HAL_I2C_Master_Receive+0x2ac>
    while (hi2c->XferSize > 0U)
 8000f46:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d059      	beq.n	8001000 <HAL_I2C_Master_Receive+0x1d4>
      if (hi2c->XferSize <= 3U)
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	f200 80c5 	bhi.w	80010dc <HAL_I2C_Master_Receive+0x2b0>
        if (hi2c->XferSize == 1U)
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d178      	bne.n	8001048 <HAL_I2C_Master_Receive+0x21c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f56:	462a      	mov	r2, r5
 8000f58:	4639      	mov	r1, r7
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f7ff fd5e 	bl	8000a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8000f60:	2800      	cmp	r0, #0
 8000f62:	d1c7      	bne.n	8000ef4 <HAL_I2C_Master_Receive+0xc8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f64:	6822      	ldr	r2, [r4, #0]
 8000f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f68:	6912      	ldr	r2, [r2, #16]
 8000f6a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8000f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f6e:	3301      	adds	r3, #1
 8000f70:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8000f72:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000f74:	3b01      	subs	r3, #1
 8000f76:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000f78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000f80:	e7e1      	b.n	8000f46 <HAL_I2C_Master_Receive+0x11a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000f82:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8000f86:	f008 0806 	and.w	r8, r8, #6
 8000f8a:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8000f8e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000f90:	4950      	ldr	r1, [pc, #320]	; (80010d4 <HAL_I2C_Master_Receive+0x2a8>)
 8000f92:	462b      	mov	r3, r5
 8000f94:	463a      	mov	r2, r7
 8000f96:	4620      	mov	r0, r4
 8000f98:	f7ff fcd5 	bl	8000946 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d1a9      	bne.n	8000ef4 <HAL_I2C_Master_Receive+0xc8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000fa0:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000fa2:	494b      	ldr	r1, [pc, #300]	; (80010d0 <HAL_I2C_Master_Receive+0x2a4>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000fa4:	b2f6      	uxtb	r6, r6
 8000fa6:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000fa8:	463a      	mov	r2, r7
 8000faa:	462b      	mov	r3, r5
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff fcca 	bl	8000946 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	d19d      	bne.n	8000ef4 <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fb8:	6823      	ldr	r3, [r4, #0]
 8000fba:	9007      	str	r0, [sp, #28]
 8000fbc:	6959      	ldr	r1, [r3, #20]
 8000fbe:	9107      	str	r1, [sp, #28]
 8000fc0:	6999      	ldr	r1, [r3, #24]
 8000fc2:	9107      	str	r1, [sp, #28]
 8000fc4:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000fcc:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000fce:	4620      	mov	r0, r4
 8000fd0:	9500      	str	r5, [sp, #0]
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000fd8:	f7ff fd4f 	bl	8000a7a <I2C_WaitOnFlagUntilTimeout>
 8000fdc:	6822      	ldr	r2, [r4, #0]
 8000fde:	b108      	cbz	r0, 8000fe4 <HAL_I2C_Master_Receive+0x1b8>
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8000fe0:	6813      	ldr	r3, [r2, #0]
 8000fe2:	e782      	b.n	8000eea <HAL_I2C_Master_Receive+0xbe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8000fe4:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8000fe8:	6113      	str	r3, [r2, #16]
 8000fea:	e78d      	b.n	8000f08 <HAL_I2C_Master_Receive+0xdc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fec:	9603      	str	r6, [sp, #12]
 8000fee:	695a      	ldr	r2, [r3, #20]
 8000ff0:	9203      	str	r2, [sp, #12]
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	9203      	str	r2, [sp, #12]
 8000ff6:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ffe:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001000:	2320      	movs	r3, #32
 8001002:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001006:	2300      	movs	r3, #0
 8001008:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800100c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001010:	e71c      	b.n	8000e4c <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 8001012:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001014:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8001016:	d10d      	bne.n	8001034 <HAL_I2C_Master_Receive+0x208>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800101c:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001024:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001026:	9605      	str	r6, [sp, #20]
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	9205      	str	r2, [sp, #20]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	9305      	str	r3, [sp, #20]
 8001030:	9b05      	ldr	r3, [sp, #20]
 8001032:	e786      	b.n	8000f42 <HAL_I2C_Master_Receive+0x116>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001038:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800103a:	9606      	str	r6, [sp, #24]
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	9206      	str	r2, [sp, #24]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	9306      	str	r3, [sp, #24]
 8001044:	9b06      	ldr	r3, [sp, #24]
 8001046:	e77c      	b.n	8000f42 <HAL_I2C_Master_Receive+0x116>
        else if (hi2c->XferSize == 2U)
 8001048:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800104a:	9500      	str	r5, [sp, #0]
 800104c:	463b      	mov	r3, r7
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4641      	mov	r1, r8
 8001054:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001056:	d11a      	bne.n	800108e <HAL_I2C_Master_Receive+0x262>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001058:	f7ff fd0f 	bl	8000a7a <I2C_WaitOnFlagUntilTimeout>
 800105c:	2800      	cmp	r0, #0
 800105e:	f47f af49 	bne.w	8000ef4 <HAL_I2C_Master_Receive+0xc8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800106a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800106c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001072:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001074:	1c53      	adds	r3, r2, #1
 8001076:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001078:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800107a:	3b01      	subs	r3, #1
 800107c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800107e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001080:	3b01      	subs	r3, #1
 8001082:	b29b      	uxth	r3, r3
 8001084:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001086:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	7053      	strb	r3, [r2, #1]
 800108c:	e76e      	b.n	8000f6c <HAL_I2C_Master_Receive+0x140>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800108e:	f7ff fcf4 	bl	8000a7a <I2C_WaitOnFlagUntilTimeout>
 8001092:	4602      	mov	r2, r0
 8001094:	2800      	cmp	r0, #0
 8001096:	f47f af2d 	bne.w	8000ef4 <HAL_I2C_Master_Receive+0xc8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	6819      	ldr	r1, [r3, #0]
 800109e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80010a2:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 80010aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010ac:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 80010ae:	3301      	adds	r3, #1
 80010b0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80010b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80010b4:	3b01      	subs	r3, #1
 80010b6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80010b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010ba:	3b01      	subs	r3, #1
 80010bc:	b29b      	uxth	r3, r3
 80010be:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010c0:	4641      	mov	r1, r8
 80010c2:	463b      	mov	r3, r7
 80010c4:	4620      	mov	r0, r4
 80010c6:	e7c7      	b.n	8001058 <HAL_I2C_Master_Receive+0x22c>
 80010c8:	00100002 	.word	0x00100002
 80010cc:	ffff0000 	.word	0xffff0000
 80010d0:	00010002 	.word	0x00010002
 80010d4:	00010008 	.word	0x00010008
 80010d8:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010dc:	462a      	mov	r2, r5
 80010de:	4639      	mov	r1, r7
 80010e0:	4620      	mov	r0, r4
 80010e2:	f7ff fc9b 	bl	8000a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	f47f af04 	bne.w	8000ef4 <HAL_I2C_Master_Receive+0xc8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010ec:	6822      	ldr	r2, [r4, #0]
 80010ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010f0:	6912      	ldr	r2, [r2, #16]
 80010f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80010f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010f6:	1c53      	adds	r3, r2, #1
 80010f8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80010fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80010fc:	3b01      	subs	r3, #1
 80010fe:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001100:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001102:	3b01      	subs	r3, #1
 8001104:	b29b      	uxth	r3, r3
 8001106:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	6959      	ldr	r1, [r3, #20]
 800110c:	0749      	lsls	r1, r1, #29
 800110e:	f57f af1a 	bpl.w	8000f46 <HAL_I2C_Master_Receive+0x11a>
 8001112:	e7b9      	b.n	8001088 <HAL_I2C_Master_Receive+0x25c>

08001114 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001114:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	2a20      	cmp	r2, #32
{
 800111c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800111e:	d116      	bne.n	800114e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001120:	2324      	movs	r3, #36	; 0x24
 8001122:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001126:	6803      	ldr	r3, [r0, #0]
 8001128:	681c      	ldr	r4, [r3, #0]
 800112a:	f024 0401 	bic.w	r4, r4, #1
 800112e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001130:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001132:	f024 0410 	bic.w	r4, r4, #16
 8001136:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001138:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800113a:	4321      	orrs	r1, r4
 800113c:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	f041 0101 	orr.w	r1, r1, #1
 8001144:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001146:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 800114a:	2000      	movs	r0, #0
 800114c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800114e:	2002      	movs	r0, #2
  }
}
 8001150:	bd10      	pop	{r4, pc}

08001152 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001152:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001154:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001158:	b2e4      	uxtb	r4, r4
 800115a:	2c20      	cmp	r4, #32
 800115c:	d116      	bne.n	800118c <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800115e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001160:	2324      	movs	r3, #36	; 0x24
 8001162:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8001166:	6815      	ldr	r5, [r2, #0]
 8001168:	f025 0501 	bic.w	r5, r5, #1
 800116c:	6015      	str	r5, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800116e:	6a55      	ldr	r5, [r2, #36]	; 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001170:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001174:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001176:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001178:	b29b      	uxth	r3, r3
 800117a:	6253      	str	r3, [r2, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800117c:	6813      	ldr	r3, [r2, #0]
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001184:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 8001188:	2000      	movs	r0, #0
 800118a:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 800118c:	2002      	movs	r0, #2
  }
}
 800118e:	bd30      	pop	{r4, r5, pc}

08001190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001190:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001194:	4604      	mov	r4, r0
 8001196:	b908      	cbnz	r0, 800119c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001198:	2001      	movs	r0, #1
 800119a:	e03f      	b.n	800121c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119c:	6803      	ldr	r3, [r0, #0]
 800119e:	07dd      	lsls	r5, r3, #31
 80011a0:	d410      	bmi.n	80011c4 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	0798      	lsls	r0, r3, #30
 80011a6:	d45a      	bmi.n	800125e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	071a      	lsls	r2, r3, #28
 80011ac:	f100 809c 	bmi.w	80012e8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	075b      	lsls	r3, r3, #29
 80011b4:	f100 80ba 	bmi.w	800132c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011b8:	69a0      	ldr	r0, [r4, #24]
 80011ba:	2800      	cmp	r0, #0
 80011bc:	f040 811b 	bne.w	80013f6 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80011c0:	2000      	movs	r0, #0
 80011c2:	e02b      	b.n	800121c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011c4:	4ba4      	ldr	r3, [pc, #656]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	f002 020c 	and.w	r2, r2, #12
 80011cc:	2a04      	cmp	r2, #4
 80011ce:	d007      	beq.n	80011e0 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d6:	2a08      	cmp	r2, #8
 80011d8:	d10a      	bne.n	80011f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	0259      	lsls	r1, r3, #9
 80011de:	d507      	bpl.n	80011f0 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e0:	4b9d      	ldr	r3, [pc, #628]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	039a      	lsls	r2, r3, #14
 80011e6:	d5dc      	bpl.n	80011a2 <HAL_RCC_OscConfig+0x12>
 80011e8:	6863      	ldr	r3, [r4, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1d9      	bne.n	80011a2 <HAL_RCC_OscConfig+0x12>
 80011ee:	e7d3      	b.n	8001198 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f0:	6863      	ldr	r3, [r4, #4]
 80011f2:	4d99      	ldr	r5, [pc, #612]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
 80011f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f8:	d113      	bne.n	8001222 <HAL_RCC_OscConfig+0x92>
 80011fa:	682b      	ldr	r3, [r5, #0]
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001200:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001202:	f7ff fa1f 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	4d94      	ldr	r5, [pc, #592]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001208:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	682b      	ldr	r3, [r5, #0]
 800120c:	039b      	lsls	r3, r3, #14
 800120e:	d4c8      	bmi.n	80011a2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fa18 	bl	8000644 <HAL_GetTick>
 8001214:	1b80      	subs	r0, r0, r6
 8001216:	2864      	cmp	r0, #100	; 0x64
 8001218:	d9f7      	bls.n	800120a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800121a:	2003      	movs	r0, #3
}
 800121c:	b002      	add	sp, #8
 800121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001222:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001226:	d104      	bne.n	8001232 <HAL_RCC_OscConfig+0xa2>
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122e:	602b      	str	r3, [r5, #0]
 8001230:	e7e3      	b.n	80011fa <HAL_RCC_OscConfig+0x6a>
 8001232:	682a      	ldr	r2, [r5, #0]
 8001234:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001238:	602a      	str	r2, [r5, #0]
 800123a:	682a      	ldr	r2, [r5, #0]
 800123c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001240:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1dd      	bne.n	8001202 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001246:	f7ff f9fd 	bl	8000644 <HAL_GetTick>
 800124a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124c:	682b      	ldr	r3, [r5, #0]
 800124e:	039f      	lsls	r7, r3, #14
 8001250:	d5a7      	bpl.n	80011a2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001252:	f7ff f9f7 	bl	8000644 <HAL_GetTick>
 8001256:	1b80      	subs	r0, r0, r6
 8001258:	2864      	cmp	r0, #100	; 0x64
 800125a:	d9f7      	bls.n	800124c <HAL_RCC_OscConfig+0xbc>
 800125c:	e7dd      	b.n	800121a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800125e:	4b7e      	ldr	r3, [pc, #504]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	f012 0f0c 	tst.w	r2, #12
 8001266:	d007      	beq.n	8001278 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126e:	2a08      	cmp	r2, #8
 8001270:	d111      	bne.n	8001296 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	025e      	lsls	r6, r3, #9
 8001276:	d40e      	bmi.n	8001296 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001278:	4b77      	ldr	r3, [pc, #476]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	0795      	lsls	r5, r2, #30
 800127e:	d502      	bpl.n	8001286 <HAL_RCC_OscConfig+0xf6>
 8001280:	68e2      	ldr	r2, [r4, #12]
 8001282:	2a01      	cmp	r2, #1
 8001284:	d188      	bne.n	8001198 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	6921      	ldr	r1, [r4, #16]
 800128a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800128e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001292:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001294:	e788      	b.n	80011a8 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001296:	68e2      	ldr	r2, [r4, #12]
 8001298:	4b70      	ldr	r3, [pc, #448]	; (800145c <HAL_RCC_OscConfig+0x2cc>)
 800129a:	b1b2      	cbz	r2, 80012ca <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012a0:	f7ff f9d0 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a4:	4d6c      	ldr	r5, [pc, #432]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80012a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	0798      	lsls	r0, r3, #30
 80012ac:	d507      	bpl.n	80012be <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	6922      	ldr	r2, [r4, #16]
 80012b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012ba:	602b      	str	r3, [r5, #0]
 80012bc:	e774      	b.n	80011a8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff f9c1 	bl	8000644 <HAL_GetTick>
 80012c2:	1b80      	subs	r0, r0, r6
 80012c4:	2802      	cmp	r0, #2
 80012c6:	d9ef      	bls.n	80012a8 <HAL_RCC_OscConfig+0x118>
 80012c8:	e7a7      	b.n	800121a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80012ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012cc:	f7ff f9ba 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d0:	4d61      	ldr	r5, [pc, #388]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80012d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	0799      	lsls	r1, r3, #30
 80012d8:	f57f af66 	bpl.w	80011a8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012dc:	f7ff f9b2 	bl	8000644 <HAL_GetTick>
 80012e0:	1b80      	subs	r0, r0, r6
 80012e2:	2802      	cmp	r0, #2
 80012e4:	d9f6      	bls.n	80012d4 <HAL_RCC_OscConfig+0x144>
 80012e6:	e798      	b.n	800121a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012e8:	6962      	ldr	r2, [r4, #20]
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <HAL_RCC_OscConfig+0x2d0>)
 80012ec:	b17a      	cbz	r2, 800130e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012f2:	f7ff f9a7 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f6:	4d58      	ldr	r5, [pc, #352]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80012f8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012fc:	079f      	lsls	r7, r3, #30
 80012fe:	f53f af57 	bmi.w	80011b0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001302:	f7ff f99f 	bl	8000644 <HAL_GetTick>
 8001306:	1b80      	subs	r0, r0, r6
 8001308:	2802      	cmp	r0, #2
 800130a:	d9f6      	bls.n	80012fa <HAL_RCC_OscConfig+0x16a>
 800130c:	e785      	b.n	800121a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800130e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001310:	f7ff f998 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	4d50      	ldr	r5, [pc, #320]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001316:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800131a:	0798      	lsls	r0, r3, #30
 800131c:	f57f af48 	bpl.w	80011b0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff f990 	bl	8000644 <HAL_GetTick>
 8001324:	1b80      	subs	r0, r0, r6
 8001326:	2802      	cmp	r0, #2
 8001328:	d9f6      	bls.n	8001318 <HAL_RCC_OscConfig+0x188>
 800132a:	e776      	b.n	800121a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132c:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
 800132e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001330:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001334:	d128      	bne.n	8001388 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	9201      	str	r2, [sp, #4]
 8001338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800133a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800134a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	4d45      	ldr	r5, [pc, #276]	; (8001464 <HAL_RCC_OscConfig+0x2d4>)
 800134e:	682b      	ldr	r3, [r5, #0]
 8001350:	05d9      	lsls	r1, r3, #23
 8001352:	d51b      	bpl.n	800138c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001354:	68a3      	ldr	r3, [r4, #8]
 8001356:	4d40      	ldr	r5, [pc, #256]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
 8001358:	2b01      	cmp	r3, #1
 800135a:	d127      	bne.n	80013ac <HAL_RCC_OscConfig+0x21c>
 800135c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001364:	f7ff f96e 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001368:	4d3b      	ldr	r5, [pc, #236]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800136a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001370:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001372:	079b      	lsls	r3, r3, #30
 8001374:	d539      	bpl.n	80013ea <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001376:	2e00      	cmp	r6, #0
 8001378:	f43f af1e 	beq.w	80011b8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800137c:	4a36      	ldr	r2, [pc, #216]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
 800137e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	e717      	b.n	80011b8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001388:	2600      	movs	r6, #0
 800138a:	e7df      	b.n	800134c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138c:	682b      	ldr	r3, [r5, #0]
 800138e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001392:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001394:	f7ff f956 	bl	8000644 <HAL_GetTick>
 8001398:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139a:	682b      	ldr	r3, [r5, #0]
 800139c:	05da      	lsls	r2, r3, #23
 800139e:	d4d9      	bmi.n	8001354 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a0:	f7ff f950 	bl	8000644 <HAL_GetTick>
 80013a4:	1bc0      	subs	r0, r0, r7
 80013a6:	2802      	cmp	r0, #2
 80013a8:	d9f7      	bls.n	800139a <HAL_RCC_OscConfig+0x20a>
 80013aa:	e736      	b.n	800121a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	d104      	bne.n	80013ba <HAL_RCC_OscConfig+0x22a>
 80013b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	672b      	str	r3, [r5, #112]	; 0x70
 80013b8:	e7d0      	b.n	800135c <HAL_RCC_OscConfig+0x1cc>
 80013ba:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	672a      	str	r2, [r5, #112]	; 0x70
 80013c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013c4:	f022 0204 	bic.w	r2, r2, #4
 80013c8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1ca      	bne.n	8001364 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80013ce:	f7ff f939 	bl	8000644 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80013d6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013da:	0798      	lsls	r0, r3, #30
 80013dc:	d5cb      	bpl.n	8001376 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff f931 	bl	8000644 <HAL_GetTick>
 80013e2:	1bc0      	subs	r0, r0, r7
 80013e4:	4540      	cmp	r0, r8
 80013e6:	d9f7      	bls.n	80013d8 <HAL_RCC_OscConfig+0x248>
 80013e8:	e717      	b.n	800121a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ea:	f7ff f92b 	bl	8000644 <HAL_GetTick>
 80013ee:	1bc0      	subs	r0, r0, r7
 80013f0:	4540      	cmp	r0, r8
 80013f2:	d9bd      	bls.n	8001370 <HAL_RCC_OscConfig+0x1e0>
 80013f4:	e711      	b.n	800121a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013f6:	4d18      	ldr	r5, [pc, #96]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
 80013f8:	68ab      	ldr	r3, [r5, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d047      	beq.n	8001492 <HAL_RCC_OscConfig+0x302>
 8001402:	4e19      	ldr	r6, [pc, #100]	; (8001468 <HAL_RCC_OscConfig+0x2d8>)
 8001404:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001406:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001408:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140a:	d135      	bne.n	8001478 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800140c:	f7ff f91a 	bl	8000644 <HAL_GetTick>
 8001410:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001412:	682b      	ldr	r3, [r5, #0]
 8001414:	0199      	lsls	r1, r3, #6
 8001416:	d429      	bmi.n	800146c <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001418:	6a22      	ldr	r2, [r4, #32]
 800141a:	69e3      	ldr	r3, [r4, #28]
 800141c:	4313      	orrs	r3, r2
 800141e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001420:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001424:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001426:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800142a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142c:	4c0a      	ldr	r4, [pc, #40]	; (8001458 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800142e:	0852      	lsrs	r2, r2, #1
 8001430:	3a01      	subs	r2, #1
 8001432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001436:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001438:	2301      	movs	r3, #1
 800143a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800143c:	f7ff f902 	bl	8000644 <HAL_GetTick>
 8001440:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	019a      	lsls	r2, r3, #6
 8001446:	f53f aebb 	bmi.w	80011c0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff f8fb 	bl	8000644 <HAL_GetTick>
 800144e:	1b40      	subs	r0, r0, r5
 8001450:	2802      	cmp	r0, #2
 8001452:	d9f6      	bls.n	8001442 <HAL_RCC_OscConfig+0x2b2>
 8001454:	e6e1      	b.n	800121a <HAL_RCC_OscConfig+0x8a>
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	42470000 	.word	0x42470000
 8001460:	42470e80 	.word	0x42470e80
 8001464:	40007000 	.word	0x40007000
 8001468:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff f8ea 	bl	8000644 <HAL_GetTick>
 8001470:	1bc0      	subs	r0, r0, r7
 8001472:	2802      	cmp	r0, #2
 8001474:	d9cd      	bls.n	8001412 <HAL_RCC_OscConfig+0x282>
 8001476:	e6d0      	b.n	800121a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001478:	f7ff f8e4 	bl	8000644 <HAL_GetTick>
 800147c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147e:	682b      	ldr	r3, [r5, #0]
 8001480:	019b      	lsls	r3, r3, #6
 8001482:	f57f ae9d 	bpl.w	80011c0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff f8dd 	bl	8000644 <HAL_GetTick>
 800148a:	1b00      	subs	r0, r0, r4
 800148c:	2802      	cmp	r0, #2
 800148e:	d9f6      	bls.n	800147e <HAL_RCC_OscConfig+0x2ee>
 8001490:	e6c3      	b.n	800121a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001492:	2801      	cmp	r0, #1
 8001494:	f43f aec2 	beq.w	800121c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8001498:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149a:	69e3      	ldr	r3, [r4, #28]
 800149c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80014a0:	429a      	cmp	r2, r3
 80014a2:	f47f ae79 	bne.w	8001198 <HAL_RCC_OscConfig+0x8>
 80014a6:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014a8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ac:	4293      	cmp	r3, r2
 80014ae:	f47f ae73 	bne.w	8001198 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014b8:	4003      	ands	r3, r0
 80014ba:	4293      	cmp	r3, r2
 80014bc:	f47f ae6c 	bne.w	8001198 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014c2:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014c6:	4293      	cmp	r3, r2
 80014c8:	f47f ae66 	bne.w	8001198 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80014ce:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80014d2:	1ac0      	subs	r0, r0, r3
 80014d4:	bf18      	it	ne
 80014d6:	2001      	movne	r0, #1
 80014d8:	e6a0      	b.n	800121c <HAL_RCC_OscConfig+0x8c>
 80014da:	bf00      	nop

080014dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014dc:	4913      	ldr	r1, [pc, #76]	; (800152c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80014de:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014e0:	688b      	ldr	r3, [r1, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d003      	beq.n	80014f2 <HAL_RCC_GetSysClockFreq+0x16>
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d003      	beq.n	80014f6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014ee:	4810      	ldr	r0, [pc, #64]	; (8001530 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014f0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80014f2:	4810      	ldr	r0, [pc, #64]	; (8001534 <HAL_RCC_GetSysClockFreq+0x58>)
 80014f4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014f6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014f8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014fc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001500:	bf14      	ite	ne
 8001502:	480c      	ldrne	r0, [pc, #48]	; (8001534 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001504:	480a      	ldreq	r0, [pc, #40]	; (8001530 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001506:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800150a:	bf18      	it	ne
 800150c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800150e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001512:	fba1 0100 	umull	r0, r1, r1, r0
 8001516:	f7fe fec3 	bl	80002a0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <HAL_RCC_GetSysClockFreq+0x50>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001522:	3301      	adds	r3, #1
 8001524:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001526:	fbb0 f0f3 	udiv	r0, r0, r3
 800152a:	bd08      	pop	{r3, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	00f42400 	.word	0x00f42400
 8001534:	017d7840 	.word	0x017d7840

08001538 <HAL_RCC_ClockConfig>:
{
 8001538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800153c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800153e:	4604      	mov	r4, r0
 8001540:	b910      	cbnz	r0, 8001548 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001542:	2001      	movs	r0, #1
 8001544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001548:	4b44      	ldr	r3, [pc, #272]	; (800165c <HAL_RCC_ClockConfig+0x124>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	f002 020f 	and.w	r2, r2, #15
 8001550:	428a      	cmp	r2, r1
 8001552:	d329      	bcc.n	80015a8 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001554:	6821      	ldr	r1, [r4, #0]
 8001556:	078f      	lsls	r7, r1, #30
 8001558:	d42e      	bmi.n	80015b8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155a:	07c8      	lsls	r0, r1, #31
 800155c:	d441      	bmi.n	80015e2 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800155e:	4b3f      	ldr	r3, [pc, #252]	; (800165c <HAL_RCC_ClockConfig+0x124>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	f002 020f 	and.w	r2, r2, #15
 8001566:	4295      	cmp	r5, r2
 8001568:	d367      	bcc.n	800163a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156a:	6822      	ldr	r2, [r4, #0]
 800156c:	0751      	lsls	r1, r2, #29
 800156e:	d46d      	bmi.n	800164c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001570:	0713      	lsls	r3, r2, #28
 8001572:	d507      	bpl.n	8001584 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001574:	4a3a      	ldr	r2, [pc, #232]	; (8001660 <HAL_RCC_ClockConfig+0x128>)
 8001576:	6921      	ldr	r1, [r4, #16]
 8001578:	6893      	ldr	r3, [r2, #8]
 800157a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800157e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001582:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001584:	f7ff ffaa 	bl	80014dc <HAL_RCC_GetSysClockFreq>
 8001588:	4b35      	ldr	r3, [pc, #212]	; (8001660 <HAL_RCC_ClockConfig+0x128>)
 800158a:	4a36      	ldr	r2, [pc, #216]	; (8001664 <HAL_RCC_ClockConfig+0x12c>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	40d8      	lsrs	r0, r3
 8001596:	4b34      	ldr	r3, [pc, #208]	; (8001668 <HAL_RCC_ClockConfig+0x130>)
 8001598:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800159a:	4b34      	ldr	r3, [pc, #208]	; (800166c <HAL_RCC_ClockConfig+0x134>)
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	f7ff f807 	bl	80005b0 <HAL_InitTick>
  return HAL_OK;
 80015a2:	2000      	movs	r0, #0
 80015a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a8:	b2ca      	uxtb	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	4299      	cmp	r1, r3
 80015b4:	d1c5      	bne.n	8001542 <HAL_RCC_ClockConfig+0xa>
 80015b6:	e7cd      	b.n	8001554 <HAL_RCC_ClockConfig+0x1c>
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ba:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015be:	bf1e      	ittt	ne
 80015c0:	689a      	ldrne	r2, [r3, #8]
 80015c2:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80015c6:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c8:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ca:	bf42      	ittt	mi
 80015cc:	689a      	ldrmi	r2, [r3, #8]
 80015ce:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80015d2:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	68a0      	ldr	r0, [r4, #8]
 80015d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015dc:	4302      	orrs	r2, r0
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	e7bb      	b.n	800155a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	6862      	ldr	r2, [r4, #4]
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_RCC_ClockConfig+0x128>)
 80015e6:	2a01      	cmp	r2, #1
 80015e8:	d11d      	bne.n	8001626 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	d0a7      	beq.n	8001542 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f2:	4e1b      	ldr	r6, [pc, #108]	; (8001660 <HAL_RCC_ClockConfig+0x128>)
 80015f4:	68b3      	ldr	r3, [r6, #8]
 80015f6:	f023 0303 	bic.w	r3, r3, #3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80015fe:	f7ff f821 	bl	8000644 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001602:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001606:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001608:	68b3      	ldr	r3, [r6, #8]
 800160a:	6862      	ldr	r2, [r4, #4]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001614:	d0a3      	beq.n	800155e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001616:	f7ff f815 	bl	8000644 <HAL_GetTick>
 800161a:	1bc0      	subs	r0, r0, r7
 800161c:	4540      	cmp	r0, r8
 800161e:	d9f3      	bls.n	8001608 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001620:	2003      	movs	r0, #3
}
 8001622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001626:	1e91      	subs	r1, r2, #2
 8001628:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162c:	d802      	bhi.n	8001634 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001632:	e7dd      	b.n	80015f0 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	f013 0f02 	tst.w	r3, #2
 8001638:	e7da      	b.n	80015f0 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	b2ea      	uxtb	r2, r5
 800163c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	429d      	cmp	r5, r3
 8001646:	f47f af7c 	bne.w	8001542 <HAL_RCC_ClockConfig+0xa>
 800164a:	e78e      	b.n	800156a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800164c:	4904      	ldr	r1, [pc, #16]	; (8001660 <HAL_RCC_ClockConfig+0x128>)
 800164e:	68e0      	ldr	r0, [r4, #12]
 8001650:	688b      	ldr	r3, [r1, #8]
 8001652:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001656:	4303      	orrs	r3, r0
 8001658:	608b      	str	r3, [r1, #8]
 800165a:	e789      	b.n	8001570 <HAL_RCC_ClockConfig+0x38>
 800165c:	40023c00 	.word	0x40023c00
 8001660:	40023800 	.word	0x40023800
 8001664:	08002698 	.word	0x08002698
 8001668:	20000010 	.word	0x20000010
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800167a:	5cd3      	ldrb	r3, [r2, r3]
 800167c:	4a03      	ldr	r2, [pc, #12]	; (800168c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800167e:	6810      	ldr	r0, [r2, #0]
}
 8001680:	40d8      	lsrs	r0, r3
 8001682:	4770      	bx	lr
 8001684:	40023800 	.word	0x40023800
 8001688:	080026a8 	.word	0x080026a8
 800168c:	20000010 	.word	0x20000010

08001690 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	4a03      	ldr	r2, [pc, #12]	; (80016ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800169e:	6810      	ldr	r0, [r2, #0]
}
 80016a0:	40d8      	lsrs	r0, r3
 80016a2:	4770      	bx	lr
 80016a4:	40023800 	.word	0x40023800
 80016a8:	080026a8 	.word	0x080026a8
 80016ac:	20000010 	.word	0x20000010

080016b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016b0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016b2:	6803      	ldr	r3, [r0, #0]
 80016b4:	68c1      	ldr	r1, [r0, #12]
 80016b6:	691a      	ldr	r2, [r3, #16]
{
 80016b8:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016ba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80016be:	430a      	orrs	r2, r1
 80016c0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016c2:	6925      	ldr	r5, [r4, #16]
 80016c4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80016c6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016c8:	69c0      	ldr	r0, [r0, #28]
 80016ca:	432a      	orrs	r2, r5
 80016cc:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80016ce:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016d2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80016d4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016d8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80016da:	430a      	orrs	r2, r1
 80016dc:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	69a1      	ldr	r1, [r4, #24]
 80016e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80016e6:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016e8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016ec:	615a      	str	r2, [r3, #20]
 80016ee:	4a25      	ldr	r2, [pc, #148]	; (8001784 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016f0:	d129      	bne.n	8001746 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d003      	beq.n	80016fe <UART_SetConfig+0x4e>
 80016f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d120      	bne.n	8001740 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80016fe:	f7ff ffc7 	bl	8001690 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001702:	6862      	ldr	r2, [r4, #4]
 8001704:	6825      	ldr	r5, [r4, #0]
 8001706:	1892      	adds	r2, r2, r2
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	f04f 0119 	mov.w	r1, #25
 8001710:	415b      	adcs	r3, r3
 8001712:	fba0 0101 	umull	r0, r1, r0, r1
 8001716:	f7fe fdc3 	bl	80002a0 <__aeabi_uldivmod>
 800171a:	2164      	movs	r1, #100	; 0x64
 800171c:	fbb0 f4f1 	udiv	r4, r0, r1
 8001720:	fb01 0314 	mls	r3, r1, r4, r0
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	3332      	adds	r3, #50	; 0x32
 8001728:	fbb3 f3f1 	udiv	r3, r3, r1
 800172c:	f003 0207 	and.w	r2, r3, #7
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8001736:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800173a:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800173c:	60ab      	str	r3, [r5, #8]
 800173e:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001740:	f7ff ff96 	bl	8001670 <HAL_RCC_GetPCLK1Freq>
 8001744:	e7dd      	b.n	8001702 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001746:	4293      	cmp	r3, r2
 8001748:	d002      	beq.n	8001750 <UART_SetConfig+0xa0>
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <UART_SetConfig+0xd8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d116      	bne.n	800177e <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001750:	f7ff ff9e 	bl	8001690 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001754:	6863      	ldr	r3, [r4, #4]
 8001756:	6825      	ldr	r5, [r4, #0]
 8001758:	2119      	movs	r1, #25
 800175a:	009a      	lsls	r2, r3, #2
 800175c:	fba0 0101 	umull	r0, r1, r0, r1
 8001760:	0f9b      	lsrs	r3, r3, #30
 8001762:	f7fe fd9d 	bl	80002a0 <__aeabi_uldivmod>
 8001766:	2264      	movs	r2, #100	; 0x64
 8001768:	fbb0 f1f2 	udiv	r1, r0, r2
 800176c:	fb02 0311 	mls	r3, r2, r1, r0
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	3332      	adds	r3, #50	; 0x32
 8001774:	fbb3 f3f2 	udiv	r3, r3, r2
 8001778:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800177c:	e7de      	b.n	800173c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800177e:	f7ff ff77 	bl	8001670 <HAL_RCC_GetPCLK1Freq>
 8001782:	e7e7      	b.n	8001754 <UART_SetConfig+0xa4>
 8001784:	40011000 	.word	0x40011000
 8001788:	40011400 	.word	0x40011400

0800178c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800178e:	4604      	mov	r4, r0
 8001790:	460e      	mov	r6, r1
 8001792:	4617      	mov	r7, r2
 8001794:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001796:	6821      	ldr	r1, [r4, #0]
 8001798:	680b      	ldr	r3, [r1, #0]
 800179a:	ea36 0303 	bics.w	r3, r6, r3
 800179e:	d101      	bne.n	80017a4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80017a0:	2000      	movs	r0, #0
}
 80017a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80017a4:	1c6b      	adds	r3, r5, #1
 80017a6:	d0f7      	beq.n	8001798 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017a8:	b995      	cbnz	r5, 80017d0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80017b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	f022 0201 	bic.w	r2, r2, #1
 80017ba:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80017bc:	2320      	movs	r3, #32
 80017be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80017c2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80017c6:	2300      	movs	r3, #0
 80017c8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80017cc:	2003      	movs	r0, #3
 80017ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017d0:	f7fe ff38 	bl	8000644 <HAL_GetTick>
 80017d4:	1bc0      	subs	r0, r0, r7
 80017d6:	4285      	cmp	r5, r0
 80017d8:	d2dd      	bcs.n	8001796 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80017da:	e7e6      	b.n	80017aa <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080017dc <HAL_UART_Init>:
{
 80017dc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80017de:	4604      	mov	r4, r0
 80017e0:	b340      	cbz	r0, 8001834 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80017e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017ea:	b91b      	cbnz	r3, 80017f4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80017ec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80017f0:	f000 fa38 	bl	8001c64 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80017f4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80017f6:	2324      	movs	r3, #36	; 0x24
 80017f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80017fc:	68d3      	ldr	r3, [r2, #12]
 80017fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001802:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001804:	4620      	mov	r0, r4
 8001806:	f7ff ff53 	bl	80016b0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001812:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800181a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001822:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001824:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001826:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001828:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800182a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800182e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001832:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
}
 8001836:	bd10      	pop	{r4, pc}

08001838 <HAL_UART_Transmit>:
{
 8001838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800183c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800183e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001842:	2b20      	cmp	r3, #32
{
 8001844:	4604      	mov	r4, r0
 8001846:	460d      	mov	r5, r1
 8001848:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800184a:	d151      	bne.n	80018f0 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 800184c:	2900      	cmp	r1, #0
 800184e:	d04c      	beq.n	80018ea <HAL_UART_Transmit+0xb2>
 8001850:	2a00      	cmp	r2, #0
 8001852:	d04a      	beq.n	80018ea <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8001854:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001858:	2b01      	cmp	r3, #1
 800185a:	d049      	beq.n	80018f0 <HAL_UART_Transmit+0xb8>
 800185c:	2301      	movs	r3, #1
 800185e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001862:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001866:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001868:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800186c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001870:	f7fe fee8 	bl	8000644 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001874:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001878:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800187a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800187e:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001882:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001884:	b29b      	uxth	r3, r3
 8001886:	b95b      	cbnz	r3, 80018a0 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001888:	463b      	mov	r3, r7
 800188a:	4632      	mov	r2, r6
 800188c:	2140      	movs	r1, #64	; 0x40
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff ff7c 	bl	800178c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001894:	b9a0      	cbnz	r0, 80018c0 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8001896:	2320      	movs	r3, #32
 8001898:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800189c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 80018a0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018a8:	68a3      	ldr	r3, [r4, #8]
 80018aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018ae:	4632      	mov	r2, r6
 80018b0:	463b      	mov	r3, r7
 80018b2:	f04f 0180 	mov.w	r1, #128	; 0x80
 80018b6:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018b8:	d10e      	bne.n	80018d8 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018ba:	f7ff ff67 	bl	800178c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80018be:	b110      	cbz	r0, 80018c6 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 80018c0:	2003      	movs	r0, #3
 80018c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80018c6:	882b      	ldrh	r3, [r5, #0]
 80018c8:	6822      	ldr	r2, [r4, #0]
 80018ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ce:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80018d0:	6923      	ldr	r3, [r4, #16]
 80018d2:	b943      	cbnz	r3, 80018e6 <HAL_UART_Transmit+0xae>
          pData += 2U;
 80018d4:	3502      	adds	r5, #2
 80018d6:	e7d4      	b.n	8001882 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018d8:	f7ff ff58 	bl	800178c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80018dc:	2800      	cmp	r0, #0
 80018de:	d1ef      	bne.n	80018c0 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	782a      	ldrb	r2, [r5, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	3501      	adds	r5, #1
 80018e8:	e7cb      	b.n	8001882 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80018ea:	2001      	movs	r0, #1
 80018ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80018f0:	2002      	movs	r0, #2
}
 80018f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080018f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b510      	push	{r4, lr}
 80018fa:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fc:	2230      	movs	r2, #48	; 0x30
 80018fe:	2100      	movs	r1, #0
 8001900:	a808      	add	r0, sp, #32
 8001902:	f000 fa83 	bl	8001e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001906:	2100      	movs	r1, #0
 8001908:	2214      	movs	r2, #20
 800190a:	a803      	add	r0, sp, #12
 800190c:	f000 fa7e 	bl	8001e0c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001910:	2400      	movs	r4, #0
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <SystemClock_Config+0x78>)
 8001914:	9401      	str	r4, [sp, #4]
 8001916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001918:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <SystemClock_Config+0x7c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800192a:	9402      	str	r4, [sp, #8]
 800192c:	6813      	ldr	r3, [r2, #0]
 800192e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	6813      	ldr	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800193a:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800193c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001944:	2302      	movs	r3, #2
 8001946:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001948:	2301      	movs	r3, #1
 800194a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800194e:	2310      	movs	r3, #16
 8001950:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001952:	f7ff fc1d 	bl	8001190 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001956:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001958:	4621      	mov	r1, r4
 800195a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800195e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001960:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001962:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001964:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001966:	f7ff fde7 	bl	8001538 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800196a:	b014      	add	sp, #80	; 0x50
 800196c:	bd10      	pop	{r4, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40007000 	.word	0x40007000

08001978 <main>:
{
 8001978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800197c:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 800197e:	f7fe fe3b 	bl	80005f8 <HAL_Init>
  SystemClock_Config();
 8001982:	f7ff ffb9 	bl	80018f8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	2214      	movs	r2, #20
 8001988:	2100      	movs	r1, #0
 800198a:	a809      	add	r0, sp, #36	; 0x24
 800198c:	f000 fa3e 	bl	8001e0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001990:	2400      	movs	r4, #0
 8001992:	4b7b      	ldr	r3, [pc, #492]	; (8001b80 <main+0x208>)
 8001994:	9405      	str	r4, [sp, #20]
 8001996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001998:	487a      	ldr	r0, [pc, #488]	; (8001b84 <main+0x20c>)
  hi2c1.Instance = I2C1;
 800199a:	4d7b      	ldr	r5, [pc, #492]	; (8001b88 <main+0x210>)
  huart5.Instance = UART5;
 800199c:	4e7b      	ldr	r6, [pc, #492]	; (8001b8c <main+0x214>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	f042 0202 	orr.w	r2, r2, #2
 80019a2:	631a      	str	r2, [r3, #48]	; 0x30
 80019a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019a6:	f002 0202 	and.w	r2, r2, #2
 80019aa:	9205      	str	r2, [sp, #20]
 80019ac:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ae:	9406      	str	r4, [sp, #24]
 80019b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b2:	f042 0204 	orr.w	r2, r2, #4
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
 80019b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ba:	f002 0204 	and.w	r2, r2, #4
 80019be:	9206      	str	r2, [sp, #24]
 80019c0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c2:	9407      	str	r4, [sp, #28]
 80019c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c6:	f042 0208 	orr.w	r2, r2, #8
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
 80019cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ce:	f002 0208 	and.w	r2, r2, #8
 80019d2:	9207      	str	r2, [sp, #28]
 80019d4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	9408      	str	r4, [sp, #32]
 80019d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80019e6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80019ea:	2108      	movs	r1, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ec:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019ee:	2708      	movs	r7, #8
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80019f0:	f7fe ff8a 	bl	8000908 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	a909      	add	r1, sp, #36	; 0x24
 80019fa:	4862      	ldr	r0, [pc, #392]	; (8001b84 <main+0x20c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a00:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f7fe fe93 	bl	8000730 <HAL_GPIO_Init>
  hi2c1.Init.ClockSpeed = 100000;
 8001a0a:	4a61      	ldr	r2, [pc, #388]	; (8001b90 <main+0x218>)
 8001a0c:	4b61      	ldr	r3, [pc, #388]	; (8001b94 <main+0x21c>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a0e:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8001a10:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a14:	4628      	mov	r0, r5
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a1a:	612b      	str	r3, [r5, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8001a1c:	60ec      	str	r4, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a1e:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a20:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a22:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a24:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a26:	f7ff f881 	bl	8000b2c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f7ff fb71 	bl	8001114 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a32:	4621      	mov	r1, r4
 8001a34:	4628      	mov	r0, r5
 8001a36:	f7ff fb8c 	bl	8001152 <HAL_I2CEx_ConfigDigitalFilter>
  huart5.Init.BaudRate = 9600;
 8001a3a:	4957      	ldr	r1, [pc, #348]	; (8001b98 <main+0x220>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3c:	60b4      	str	r4, [r6, #8]
  huart5.Init.BaudRate = 9600;
 8001a3e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001a42:	e886 000a 	stmia.w	r6, {r1, r3}
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a46:	4630      	mov	r0, r6
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a48:	230c      	movs	r3, #12
 8001a4a:	6173      	str	r3, [r6, #20]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	60f4      	str	r4, [r6, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a4e:	6134      	str	r4, [r6, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a50:	61b4      	str	r4, [r6, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a52:	61f4      	str	r4, [r6, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a54:	f7ff fec2 	bl	80017dc <HAL_UART_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001a58:	4642      	mov	r2, r8
 8001a5a:	4639      	mov	r1, r7
 8001a5c:	4849      	ldr	r0, [pc, #292]	; (8001b84 <main+0x20c>)
 8001a5e:	f7fe ff53 	bl	8000908 <HAL_GPIO_WritePin>
  uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8001a62:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <main+0x224>)
  char temp_buf[4] = {0, };
 8001a64:	9404      	str	r4, [sp, #16]
  uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8001a66:	881a      	ldrh	r2, [r3, #0]
  char hum_buf[4] = {0, };
 8001a68:	9409      	str	r4, [sp, #36]	; 0x24
  uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8001a6a:	789b      	ldrb	r3, [r3, #2]
	  sprintf(temp_buf,"%d",(int)temperature);
 8001a6c:	4c4c      	ldr	r4, [pc, #304]	; (8001ba0 <main+0x228>)
  uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8001a6e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8001a72:	f88d 300e 	strb.w	r3, [sp, #14]
	  HAL_I2C_Master_Transmit(&hi2c1, 0xB8, 0x00, 0, HAL_MAX_DELAY);
 8001a76:	f04f 38ff 	mov.w	r8, #4294967295
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f8cd 8000 	str.w	r8, [sp]
 8001a82:	21b8      	movs	r1, #184	; 0xb8
 8001a84:	4628      	mov	r0, r5
 8001a86:	f7ff f8fd 	bl	8000c84 <HAL_I2C_Master_Transmit>
	  HAL_Delay(1);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7fe fde0 	bl	8000650 <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c1, 0xB8, data, 8, HAL_MAX_DELAY);
 8001a90:	4f44      	ldr	r7, [pc, #272]	; (8001ba4 <main+0x22c>)
	  HAL_I2C_Master_Transmit(&hi2c1, 0xB8, registers, 3, HAL_MAX_DELAY);
 8001a92:	f8cd 8000 	str.w	r8, [sp]
 8001a96:	aa03      	add	r2, sp, #12
 8001a98:	2303      	movs	r3, #3
 8001a9a:	21b8      	movs	r1, #184	; 0xb8
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	f7ff f8f1 	bl	8000c84 <HAL_I2C_Master_Transmit>
	  HAL_Delay(2);
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f7fe fdd4 	bl	8000650 <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c1, 0xB8, data, 8, HAL_MAX_DELAY);
 8001aa8:	f8cd 8000 	str.w	r8, [sp]
 8001aac:	463a      	mov	r2, r7
 8001aae:	21b8      	movs	r1, #184	; 0xb8
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	f7ff f9ba 	bl	8000e2c <HAL_I2C_Master_Receive>
	  uint16_t temp_temperature = (data[5] | data[4] << 8);
 8001ab8:	793b      	ldrb	r3, [r7, #4]
 8001aba:	797a      	ldrb	r2, [r7, #5]
	  temperature = (float) temp_temperature / 10.0;
 8001abc:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8001bb0 <main+0x238>
	  humidity = (float) (data[3] | data[2] << 8) / 10.0;
 8001ac0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001bb4 <main+0x23c>
	  uint16_t temp_temperature = (data[5] | data[4] << 8);
 8001ac4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001ac8:	b212      	sxth	r2, r2
	  if (temp_temperature & 0x8000) {
 8001aca:	2a00      	cmp	r2, #0
	  uint16_t temp_temperature = (data[5] | data[4] << 8);
 8001acc:	b293      	uxth	r3, r2
	  		temp_temperature = -(int16_t) (temp_temperature & 0x7fff);
 8001ace:	bfbe      	ittt	lt
 8001ad0:	f3c3 030e 	ubfxlt	r3, r3, #0, #15
 8001ad4:	425b      	neglt	r3, r3
 8001ad6:	b29b      	uxthlt	r3, r3
	  temperature = (float) temp_temperature / 10.0;
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ae4:	eec7 6a87 	vdiv.f32	s13, s15, s14
	  humidity = (float) (data[3] | data[2] << 8) / 10.0;
 8001ae8:	78ba      	ldrb	r2, [r7, #2]
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	  HAL_Delay(1000);
 8001af0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	  humidity = (float) (data[3] | data[2] << 8) / 10.0;
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  temperature = (float) temp_temperature / 10.0;
 8001afc:	edc9 6a00 	vstr	s13, [r9]
	  humidity = (float) (data[3] | data[2] << 8) / 10.0;
 8001b00:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b04:	edc8 6a00 	vstr	s13, [r8]
	  HAL_Delay(1000);
 8001b08:	f7fe fda2 	bl	8000650 <HAL_Delay>
	  sprintf(temp_buf,"%d",(int)temperature);
 8001b0c:	edd9 7a00 	vldr	s15, [r9]
 8001b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b14:	4621      	mov	r1, r4
 8001b16:	ee17 2a90 	vmov	r2, s15
 8001b1a:	a804      	add	r0, sp, #16
 8001b1c:	f000 f97e 	bl	8001e1c <siprintf>
	  sprintf(hum_buf,"%d",(int)humidity);
 8001b20:	edd8 7a00 	vldr	s15, [r8]
 8001b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b28:	4621      	mov	r1, r4
 8001b2a:	ee17 2a90 	vmov	r2, s15
 8001b2e:	a809      	add	r0, sp, #36	; 0x24
 8001b30:	f000 f974 	bl	8001e1c <siprintf>
	  strcat(temp_buf, "t\n");
 8001b34:	491c      	ldr	r1, [pc, #112]	; (8001ba8 <main+0x230>)
 8001b36:	a804      	add	r0, sp, #16
 8001b38:	f000 f994 	bl	8001e64 <strcat>
	  strcat(hum_buf, "h\n");
 8001b3c:	491b      	ldr	r1, [pc, #108]	; (8001bac <main+0x234>)
 8001b3e:	a809      	add	r0, sp, #36	; 0x24
 8001b40:	f000 f990 	bl	8001e64 <strcat>
	  HAL_UART_Transmit(&huart5,(uint8_t*)temp_buf,strlen(temp_buf),HAL_MAX_DELAY);
 8001b44:	a804      	add	r0, sp, #16
 8001b46:	f7fe fb53 	bl	80001f0 <strlen>
 8001b4a:	a904      	add	r1, sp, #16
 8001b4c:	b282      	uxth	r2, r0
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	4630      	mov	r0, r6
 8001b54:	f7ff fe70 	bl	8001838 <HAL_UART_Transmit>
	  HAL_Delay(5000);
 8001b58:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b5c:	f7fe fd78 	bl	8000650 <HAL_Delay>
	  HAL_UART_Transmit(&huart5,(uint8_t*)hum_buf,strlen(hum_buf),HAL_MAX_DELAY);
 8001b60:	a809      	add	r0, sp, #36	; 0x24
 8001b62:	f7fe fb45 	bl	80001f0 <strlen>
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	b282      	uxth	r2, r0
 8001b6c:	a909      	add	r1, sp, #36	; 0x24
 8001b6e:	4630      	mov	r0, r6
 8001b70:	f7ff fe62 	bl	8001838 <HAL_UART_Transmit>
	  HAL_Delay(5000);
 8001b74:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b78:	f7fe fd6a 	bl	8000650 <HAL_Delay>
  {
 8001b7c:	e77b      	b.n	8001a76 <main+0xfe>
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	200000ac 	.word	0x200000ac
 8001b8c:	20000100 	.word	0x20000100
 8001b90:	40005400 	.word	0x40005400
 8001b94:	000186a0 	.word	0x000186a0
 8001b98:	40005000 	.word	0x40005000
 8001b9c:	0800268c 	.word	0x0800268c
 8001ba0:	0800268f 	.word	0x0800268f
 8001ba4:	20000094 	.word	0x20000094
 8001ba8:	08002692 	.word	0x08002692
 8001bac:	08002695 	.word	0x08002695
 8001bb0:	2000000c 	.word	0x2000000c
 8001bb4:	20000008 	.word	0x20000008

08001bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_MspInit+0x34>)
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	9100      	str	r1, [sp, #0]
 8001bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bc6:	645a      	str	r2, [r3, #68]	; 0x44
 8001bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001bce:	9200      	str	r2, [sp, #0]
 8001bd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	9101      	str	r1, [sp, #4]
 8001bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be6:	b002      	add	sp, #8
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800

08001bf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf0:	b530      	push	{r4, r5, lr}
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf6:	2214      	movs	r2, #20
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	a803      	add	r0, sp, #12
 8001bfc:	f000 f906 	bl	8001e0c <memset>
  if(hi2c->Instance==I2C1)
 8001c00:	6822      	ldr	r2, [r4, #0]
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_I2C_MspInit+0x68>)
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d124      	bne.n	8001c52 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	4c14      	ldr	r4, [pc, #80]	; (8001c5c <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	4815      	ldr	r0, [pc, #84]	; (8001c60 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0c:	2500      	movs	r5, #0
 8001c0e:	9501      	str	r5, [sp, #4]
 8001c10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c12:	f043 0302 	orr.w	r3, r3, #2
 8001c16:	6323      	str	r3, [r4, #48]	; 0x30
 8001c18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c26:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c28:	2312      	movs	r3, #18
 8001c2a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c36:	2304      	movs	r3, #4
 8001c38:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f7fe fd79 	bl	8000730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3e:	9502      	str	r5, [sp, #8]
 8001c40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c46:	6423      	str	r3, [r4, #64]	; 0x40
 8001c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c52:	b009      	add	sp, #36	; 0x24
 8001c54:	bd30      	pop	{r4, r5, pc}
 8001c56:	bf00      	nop
 8001c58:	40005400 	.word	0x40005400
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020400 	.word	0x40020400

08001c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c66:	4604      	mov	r4, r0
 8001c68:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6a:	2214      	movs	r2, #20
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	a803      	add	r0, sp, #12
 8001c70:	f000 f8cc 	bl	8001e0c <memset>
  if(huart->Instance==UART5)
 8001c74:	6822      	ldr	r2, [r4, #0]
 8001c76:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <HAL_UART_MspInit+0x90>)
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d139      	bne.n	8001cf0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c7c:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8001c80:	2200      	movs	r2, #0
 8001c82:	9200      	str	r2, [sp, #0]
 8001c84:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c86:	481c      	ldr	r0, [pc, #112]	; (8001cf8 <HAL_UART_MspInit+0x94>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001c8c:	6419      	str	r1, [r3, #64]	; 0x40
 8001c8e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001c90:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 8001c94:	9100      	str	r1, [sp, #0]
 8001c96:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c98:	9201      	str	r2, [sp, #4]
 8001c9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c9c:	f041 0104 	orr.w	r1, r1, #4
 8001ca0:	6319      	str	r1, [r3, #48]	; 0x30
 8001ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca4:	f001 0104 	and.w	r1, r1, #4
 8001ca8:	9101      	str	r1, [sp, #4]
 8001caa:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cac:	9202      	str	r2, [sp, #8]
 8001cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cb0:	f042 0208 	orr.w	r2, r2, #8
 8001cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	9302      	str	r3, [sp, #8]
 8001cbe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc6:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cca:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ccc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd2:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cd6:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd8:	f7fe fd2a 	bl	8000730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cdc:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cde:	a903      	add	r1, sp, #12
 8001ce0:	4806      	ldr	r0, [pc, #24]	; (8001cfc <HAL_UART_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ce2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce6:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cea:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cec:	f7fe fd20 	bl	8000730 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001cf0:	b009      	add	sp, #36	; 0x24
 8001cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf4:	40005000 	.word	0x40005000
 8001cf8:	40020800 	.word	0x40020800
 8001cfc:	40020c00 	.word	0x40020c00

08001d00 <NMI_Handler>:
 8001d00:	4770      	bx	lr

08001d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d02:	e7fe      	b.n	8001d02 <HardFault_Handler>

08001d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d04:	e7fe      	b.n	8001d04 <MemManage_Handler>

08001d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d06:	e7fe      	b.n	8001d06 <BusFault_Handler>

08001d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler>

08001d0a <SVC_Handler>:
 8001d0a:	4770      	bx	lr

08001d0c <DebugMon_Handler>:
 8001d0c:	4770      	bx	lr

08001d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0e:	4770      	bx	lr

08001d10 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d10:	f7fe bc8c 	b.w	800062c <HAL_IncTick>

08001d14 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001d14:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <_sbrk+0x2c>)
 8001d18:	6819      	ldr	r1, [r3, #0]
{
 8001d1a:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001d1c:	b909      	cbnz	r1, 8001d22 <_sbrk+0xe>
		heap_end = &end;
 8001d1e:	4909      	ldr	r1, [pc, #36]	; (8001d44 <_sbrk+0x30>)
 8001d20:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8001d22:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001d24:	4669      	mov	r1, sp
 8001d26:	4402      	add	r2, r0
 8001d28:	428a      	cmp	r2, r1
 8001d2a:	d906      	bls.n	8001d3a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001d2c:	f000 f844 	bl	8001db8 <__errno>
 8001d30:	230c      	movs	r3, #12
 8001d32:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001d3a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001d3c:	bd08      	pop	{r3, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000009c 	.word	0x2000009c
 8001d44:	20000144 	.word	0x20000144

08001d48 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <SystemInit+0x18>)
 8001d4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d4e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d9c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d6a:	e003      	b.n	8001d74 <LoopCopyDataInit>

08001d6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d72:	3104      	adds	r1, #4

08001d74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d74:	480b      	ldr	r0, [pc, #44]	; (8001da4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d7c:	d3f6      	bcc.n	8001d6c <CopyDataInit>
  ldr  r2, =_sbss
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d80:	e002      	b.n	8001d88 <LoopFillZerobss>

08001d82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d84:	f842 3b04 	str.w	r3, [r2], #4

08001d88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d8c:	d3f9      	bcc.n	8001d82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d8e:	f7ff ffdb 	bl	8001d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d92:	f000 f817 	bl	8001dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d96:	f7ff fdef 	bl	8001978 <main>
  bx  lr    
 8001d9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d9c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001da0:	080026f4 	.word	0x080026f4
  ldr  r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001da8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001dac:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001db0:	20000144 	.word	0x20000144

08001db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC_IRQHandler>
	...

08001db8 <__errno>:
 8001db8:	4b01      	ldr	r3, [pc, #4]	; (8001dc0 <__errno+0x8>)
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000014 	.word	0x20000014

08001dc4 <__libc_init_array>:
 8001dc4:	b570      	push	{r4, r5, r6, lr}
 8001dc6:	4e0d      	ldr	r6, [pc, #52]	; (8001dfc <__libc_init_array+0x38>)
 8001dc8:	4c0d      	ldr	r4, [pc, #52]	; (8001e00 <__libc_init_array+0x3c>)
 8001dca:	1ba4      	subs	r4, r4, r6
 8001dcc:	10a4      	asrs	r4, r4, #2
 8001dce:	2500      	movs	r5, #0
 8001dd0:	42a5      	cmp	r5, r4
 8001dd2:	d109      	bne.n	8001de8 <__libc_init_array+0x24>
 8001dd4:	4e0b      	ldr	r6, [pc, #44]	; (8001e04 <__libc_init_array+0x40>)
 8001dd6:	4c0c      	ldr	r4, [pc, #48]	; (8001e08 <__libc_init_array+0x44>)
 8001dd8:	f000 fc4c 	bl	8002674 <_init>
 8001ddc:	1ba4      	subs	r4, r4, r6
 8001dde:	10a4      	asrs	r4, r4, #2
 8001de0:	2500      	movs	r5, #0
 8001de2:	42a5      	cmp	r5, r4
 8001de4:	d105      	bne.n	8001df2 <__libc_init_array+0x2e>
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
 8001de8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dec:	4798      	blx	r3
 8001dee:	3501      	adds	r5, #1
 8001df0:	e7ee      	b.n	8001dd0 <__libc_init_array+0xc>
 8001df2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001df6:	4798      	blx	r3
 8001df8:	3501      	adds	r5, #1
 8001dfa:	e7f2      	b.n	8001de2 <__libc_init_array+0x1e>
 8001dfc:	080026ec 	.word	0x080026ec
 8001e00:	080026ec 	.word	0x080026ec
 8001e04:	080026ec 	.word	0x080026ec
 8001e08:	080026f0 	.word	0x080026f0

08001e0c <memset>:
 8001e0c:	4402      	add	r2, r0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d100      	bne.n	8001e16 <memset+0xa>
 8001e14:	4770      	bx	lr
 8001e16:	f803 1b01 	strb.w	r1, [r3], #1
 8001e1a:	e7f9      	b.n	8001e10 <memset+0x4>

08001e1c <siprintf>:
 8001e1c:	b40e      	push	{r1, r2, r3}
 8001e1e:	b500      	push	{lr}
 8001e20:	b09c      	sub	sp, #112	; 0x70
 8001e22:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001e26:	ab1d      	add	r3, sp, #116	; 0x74
 8001e28:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001e2c:	9002      	str	r0, [sp, #8]
 8001e2e:	9006      	str	r0, [sp, #24]
 8001e30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e34:	480a      	ldr	r0, [pc, #40]	; (8001e60 <siprintf+0x44>)
 8001e36:	9104      	str	r1, [sp, #16]
 8001e38:	9107      	str	r1, [sp, #28]
 8001e3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e42:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001e46:	6800      	ldr	r0, [r0, #0]
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	a902      	add	r1, sp, #8
 8001e4c:	f000 f874 	bl	8001f38 <_svfiprintf_r>
 8001e50:	9b02      	ldr	r3, [sp, #8]
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	b01c      	add	sp, #112	; 0x70
 8001e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e5c:	b003      	add	sp, #12
 8001e5e:	4770      	bx	lr
 8001e60:	20000014 	.word	0x20000014

08001e64 <strcat>:
 8001e64:	b510      	push	{r4, lr}
 8001e66:	4602      	mov	r2, r0
 8001e68:	4613      	mov	r3, r2
 8001e6a:	3201      	adds	r2, #1
 8001e6c:	781c      	ldrb	r4, [r3, #0]
 8001e6e:	2c00      	cmp	r4, #0
 8001e70:	d1fa      	bne.n	8001e68 <strcat+0x4>
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e78:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001e7c:	2a00      	cmp	r2, #0
 8001e7e:	d1f9      	bne.n	8001e74 <strcat+0x10>
 8001e80:	bd10      	pop	{r4, pc}

08001e82 <__ssputs_r>:
 8001e82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e86:	688e      	ldr	r6, [r1, #8]
 8001e88:	429e      	cmp	r6, r3
 8001e8a:	4682      	mov	sl, r0
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	4691      	mov	r9, r2
 8001e90:	4698      	mov	r8, r3
 8001e92:	d835      	bhi.n	8001f00 <__ssputs_r+0x7e>
 8001e94:	898a      	ldrh	r2, [r1, #12]
 8001e96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e9a:	d031      	beq.n	8001f00 <__ssputs_r+0x7e>
 8001e9c:	6825      	ldr	r5, [r4, #0]
 8001e9e:	6909      	ldr	r1, [r1, #16]
 8001ea0:	1a6f      	subs	r7, r5, r1
 8001ea2:	6965      	ldr	r5, [r4, #20]
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001eaa:	fb95 f5f3 	sdiv	r5, r5, r3
 8001eae:	f108 0301 	add.w	r3, r8, #1
 8001eb2:	443b      	add	r3, r7
 8001eb4:	429d      	cmp	r5, r3
 8001eb6:	bf38      	it	cc
 8001eb8:	461d      	movcc	r5, r3
 8001eba:	0553      	lsls	r3, r2, #21
 8001ebc:	d531      	bpl.n	8001f22 <__ssputs_r+0xa0>
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f000 fb38 	bl	8002534 <_malloc_r>
 8001ec4:	4606      	mov	r6, r0
 8001ec6:	b950      	cbnz	r0, 8001ede <__ssputs_r+0x5c>
 8001ec8:	230c      	movs	r3, #12
 8001eca:	f8ca 3000 	str.w	r3, [sl]
 8001ece:	89a3      	ldrh	r3, [r4, #12]
 8001ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ed4:	81a3      	strh	r3, [r4, #12]
 8001ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ede:	463a      	mov	r2, r7
 8001ee0:	6921      	ldr	r1, [r4, #16]
 8001ee2:	f000 fab3 	bl	800244c <memcpy>
 8001ee6:	89a3      	ldrh	r3, [r4, #12]
 8001ee8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef0:	81a3      	strh	r3, [r4, #12]
 8001ef2:	6126      	str	r6, [r4, #16]
 8001ef4:	6165      	str	r5, [r4, #20]
 8001ef6:	443e      	add	r6, r7
 8001ef8:	1bed      	subs	r5, r5, r7
 8001efa:	6026      	str	r6, [r4, #0]
 8001efc:	60a5      	str	r5, [r4, #8]
 8001efe:	4646      	mov	r6, r8
 8001f00:	4546      	cmp	r6, r8
 8001f02:	bf28      	it	cs
 8001f04:	4646      	movcs	r6, r8
 8001f06:	4632      	mov	r2, r6
 8001f08:	4649      	mov	r1, r9
 8001f0a:	6820      	ldr	r0, [r4, #0]
 8001f0c:	f000 faa9 	bl	8002462 <memmove>
 8001f10:	68a3      	ldr	r3, [r4, #8]
 8001f12:	1b9b      	subs	r3, r3, r6
 8001f14:	60a3      	str	r3, [r4, #8]
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	441e      	add	r6, r3
 8001f1a:	6026      	str	r6, [r4, #0]
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f22:	462a      	mov	r2, r5
 8001f24:	f000 fb64 	bl	80025f0 <_realloc_r>
 8001f28:	4606      	mov	r6, r0
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d1e1      	bne.n	8001ef2 <__ssputs_r+0x70>
 8001f2e:	6921      	ldr	r1, [r4, #16]
 8001f30:	4650      	mov	r0, sl
 8001f32:	f000 fab1 	bl	8002498 <_free_r>
 8001f36:	e7c7      	b.n	8001ec8 <__ssputs_r+0x46>

08001f38 <_svfiprintf_r>:
 8001f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f3c:	b09d      	sub	sp, #116	; 0x74
 8001f3e:	4680      	mov	r8, r0
 8001f40:	9303      	str	r3, [sp, #12]
 8001f42:	898b      	ldrh	r3, [r1, #12]
 8001f44:	061c      	lsls	r4, r3, #24
 8001f46:	460d      	mov	r5, r1
 8001f48:	4616      	mov	r6, r2
 8001f4a:	d50f      	bpl.n	8001f6c <_svfiprintf_r+0x34>
 8001f4c:	690b      	ldr	r3, [r1, #16]
 8001f4e:	b96b      	cbnz	r3, 8001f6c <_svfiprintf_r+0x34>
 8001f50:	2140      	movs	r1, #64	; 0x40
 8001f52:	f000 faef 	bl	8002534 <_malloc_r>
 8001f56:	6028      	str	r0, [r5, #0]
 8001f58:	6128      	str	r0, [r5, #16]
 8001f5a:	b928      	cbnz	r0, 8001f68 <_svfiprintf_r+0x30>
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	f8c8 3000 	str.w	r3, [r8]
 8001f62:	f04f 30ff 	mov.w	r0, #4294967295
 8001f66:	e0c5      	b.n	80020f4 <_svfiprintf_r+0x1bc>
 8001f68:	2340      	movs	r3, #64	; 0x40
 8001f6a:	616b      	str	r3, [r5, #20]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8001f70:	2320      	movs	r3, #32
 8001f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f76:	2330      	movs	r3, #48	; 0x30
 8001f78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f7c:	f04f 0b01 	mov.w	fp, #1
 8001f80:	4637      	mov	r7, r6
 8001f82:	463c      	mov	r4, r7
 8001f84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d13c      	bne.n	8002006 <_svfiprintf_r+0xce>
 8001f8c:	ebb7 0a06 	subs.w	sl, r7, r6
 8001f90:	d00b      	beq.n	8001faa <_svfiprintf_r+0x72>
 8001f92:	4653      	mov	r3, sl
 8001f94:	4632      	mov	r2, r6
 8001f96:	4629      	mov	r1, r5
 8001f98:	4640      	mov	r0, r8
 8001f9a:	f7ff ff72 	bl	8001e82 <__ssputs_r>
 8001f9e:	3001      	adds	r0, #1
 8001fa0:	f000 80a3 	beq.w	80020ea <_svfiprintf_r+0x1b2>
 8001fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fa6:	4453      	add	r3, sl
 8001fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8001faa:	783b      	ldrb	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 809c 	beq.w	80020ea <_svfiprintf_r+0x1b2>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	9304      	str	r3, [sp, #16]
 8001fba:	9307      	str	r3, [sp, #28]
 8001fbc:	9205      	str	r2, [sp, #20]
 8001fbe:	9306      	str	r3, [sp, #24]
 8001fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8001fc6:	2205      	movs	r2, #5
 8001fc8:	7821      	ldrb	r1, [r4, #0]
 8001fca:	4850      	ldr	r0, [pc, #320]	; (800210c <_svfiprintf_r+0x1d4>)
 8001fcc:	f7fe f918 	bl	8000200 <memchr>
 8001fd0:	1c67      	adds	r7, r4, #1
 8001fd2:	9b04      	ldr	r3, [sp, #16]
 8001fd4:	b9d8      	cbnz	r0, 800200e <_svfiprintf_r+0xd6>
 8001fd6:	06d9      	lsls	r1, r3, #27
 8001fd8:	bf44      	itt	mi
 8001fda:	2220      	movmi	r2, #32
 8001fdc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fe0:	071a      	lsls	r2, r3, #28
 8001fe2:	bf44      	itt	mi
 8001fe4:	222b      	movmi	r2, #43	; 0x2b
 8001fe6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fea:	7822      	ldrb	r2, [r4, #0]
 8001fec:	2a2a      	cmp	r2, #42	; 0x2a
 8001fee:	d016      	beq.n	800201e <_svfiprintf_r+0xe6>
 8001ff0:	9a07      	ldr	r2, [sp, #28]
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	4627      	mov	r7, r4
 8001ff8:	3401      	adds	r4, #1
 8001ffa:	783b      	ldrb	r3, [r7, #0]
 8001ffc:	3b30      	subs	r3, #48	; 0x30
 8001ffe:	2b09      	cmp	r3, #9
 8002000:	d951      	bls.n	80020a6 <_svfiprintf_r+0x16e>
 8002002:	b1c9      	cbz	r1, 8002038 <_svfiprintf_r+0x100>
 8002004:	e011      	b.n	800202a <_svfiprintf_r+0xf2>
 8002006:	2b25      	cmp	r3, #37	; 0x25
 8002008:	d0c0      	beq.n	8001f8c <_svfiprintf_r+0x54>
 800200a:	4627      	mov	r7, r4
 800200c:	e7b9      	b.n	8001f82 <_svfiprintf_r+0x4a>
 800200e:	4a3f      	ldr	r2, [pc, #252]	; (800210c <_svfiprintf_r+0x1d4>)
 8002010:	1a80      	subs	r0, r0, r2
 8002012:	fa0b f000 	lsl.w	r0, fp, r0
 8002016:	4318      	orrs	r0, r3
 8002018:	9004      	str	r0, [sp, #16]
 800201a:	463c      	mov	r4, r7
 800201c:	e7d3      	b.n	8001fc6 <_svfiprintf_r+0x8e>
 800201e:	9a03      	ldr	r2, [sp, #12]
 8002020:	1d11      	adds	r1, r2, #4
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	9103      	str	r1, [sp, #12]
 8002026:	2a00      	cmp	r2, #0
 8002028:	db01      	blt.n	800202e <_svfiprintf_r+0xf6>
 800202a:	9207      	str	r2, [sp, #28]
 800202c:	e004      	b.n	8002038 <_svfiprintf_r+0x100>
 800202e:	4252      	negs	r2, r2
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	9207      	str	r2, [sp, #28]
 8002036:	9304      	str	r3, [sp, #16]
 8002038:	783b      	ldrb	r3, [r7, #0]
 800203a:	2b2e      	cmp	r3, #46	; 0x2e
 800203c:	d10e      	bne.n	800205c <_svfiprintf_r+0x124>
 800203e:	787b      	ldrb	r3, [r7, #1]
 8002040:	2b2a      	cmp	r3, #42	; 0x2a
 8002042:	f107 0101 	add.w	r1, r7, #1
 8002046:	d132      	bne.n	80020ae <_svfiprintf_r+0x176>
 8002048:	9b03      	ldr	r3, [sp, #12]
 800204a:	1d1a      	adds	r2, r3, #4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	9203      	str	r2, [sp, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	bfb8      	it	lt
 8002054:	f04f 33ff 	movlt.w	r3, #4294967295
 8002058:	3702      	adds	r7, #2
 800205a:	9305      	str	r3, [sp, #20]
 800205c:	4c2c      	ldr	r4, [pc, #176]	; (8002110 <_svfiprintf_r+0x1d8>)
 800205e:	7839      	ldrb	r1, [r7, #0]
 8002060:	2203      	movs	r2, #3
 8002062:	4620      	mov	r0, r4
 8002064:	f7fe f8cc 	bl	8000200 <memchr>
 8002068:	b138      	cbz	r0, 800207a <_svfiprintf_r+0x142>
 800206a:	2340      	movs	r3, #64	; 0x40
 800206c:	1b00      	subs	r0, r0, r4
 800206e:	fa03 f000 	lsl.w	r0, r3, r0
 8002072:	9b04      	ldr	r3, [sp, #16]
 8002074:	4303      	orrs	r3, r0
 8002076:	9304      	str	r3, [sp, #16]
 8002078:	3701      	adds	r7, #1
 800207a:	7839      	ldrb	r1, [r7, #0]
 800207c:	4825      	ldr	r0, [pc, #148]	; (8002114 <_svfiprintf_r+0x1dc>)
 800207e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002082:	2206      	movs	r2, #6
 8002084:	1c7e      	adds	r6, r7, #1
 8002086:	f7fe f8bb 	bl	8000200 <memchr>
 800208a:	2800      	cmp	r0, #0
 800208c:	d035      	beq.n	80020fa <_svfiprintf_r+0x1c2>
 800208e:	4b22      	ldr	r3, [pc, #136]	; (8002118 <_svfiprintf_r+0x1e0>)
 8002090:	b9fb      	cbnz	r3, 80020d2 <_svfiprintf_r+0x19a>
 8002092:	9b03      	ldr	r3, [sp, #12]
 8002094:	3307      	adds	r3, #7
 8002096:	f023 0307 	bic.w	r3, r3, #7
 800209a:	3308      	adds	r3, #8
 800209c:	9303      	str	r3, [sp, #12]
 800209e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020a0:	444b      	add	r3, r9
 80020a2:	9309      	str	r3, [sp, #36]	; 0x24
 80020a4:	e76c      	b.n	8001f80 <_svfiprintf_r+0x48>
 80020a6:	fb00 3202 	mla	r2, r0, r2, r3
 80020aa:	2101      	movs	r1, #1
 80020ac:	e7a3      	b.n	8001ff6 <_svfiprintf_r+0xbe>
 80020ae:	2300      	movs	r3, #0
 80020b0:	9305      	str	r3, [sp, #20]
 80020b2:	4618      	mov	r0, r3
 80020b4:	240a      	movs	r4, #10
 80020b6:	460f      	mov	r7, r1
 80020b8:	3101      	adds	r1, #1
 80020ba:	783a      	ldrb	r2, [r7, #0]
 80020bc:	3a30      	subs	r2, #48	; 0x30
 80020be:	2a09      	cmp	r2, #9
 80020c0:	d903      	bls.n	80020ca <_svfiprintf_r+0x192>
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0ca      	beq.n	800205c <_svfiprintf_r+0x124>
 80020c6:	9005      	str	r0, [sp, #20]
 80020c8:	e7c8      	b.n	800205c <_svfiprintf_r+0x124>
 80020ca:	fb04 2000 	mla	r0, r4, r0, r2
 80020ce:	2301      	movs	r3, #1
 80020d0:	e7f1      	b.n	80020b6 <_svfiprintf_r+0x17e>
 80020d2:	ab03      	add	r3, sp, #12
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	462a      	mov	r2, r5
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <_svfiprintf_r+0x1e4>)
 80020da:	a904      	add	r1, sp, #16
 80020dc:	4640      	mov	r0, r8
 80020de:	f3af 8000 	nop.w
 80020e2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80020e6:	4681      	mov	r9, r0
 80020e8:	d1d9      	bne.n	800209e <_svfiprintf_r+0x166>
 80020ea:	89ab      	ldrh	r3, [r5, #12]
 80020ec:	065b      	lsls	r3, r3, #25
 80020ee:	f53f af38 	bmi.w	8001f62 <_svfiprintf_r+0x2a>
 80020f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020f4:	b01d      	add	sp, #116	; 0x74
 80020f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020fa:	ab03      	add	r3, sp, #12
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	462a      	mov	r2, r5
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <_svfiprintf_r+0x1e4>)
 8002102:	a904      	add	r1, sp, #16
 8002104:	4640      	mov	r0, r8
 8002106:	f000 f881 	bl	800220c <_printf_i>
 800210a:	e7ea      	b.n	80020e2 <_svfiprintf_r+0x1aa>
 800210c:	080026b0 	.word	0x080026b0
 8002110:	080026b6 	.word	0x080026b6
 8002114:	080026ba 	.word	0x080026ba
 8002118:	00000000 	.word	0x00000000
 800211c:	08001e83 	.word	0x08001e83

08002120 <_printf_common>:
 8002120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002124:	4691      	mov	r9, r2
 8002126:	461f      	mov	r7, r3
 8002128:	688a      	ldr	r2, [r1, #8]
 800212a:	690b      	ldr	r3, [r1, #16]
 800212c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002130:	4293      	cmp	r3, r2
 8002132:	bfb8      	it	lt
 8002134:	4613      	movlt	r3, r2
 8002136:	f8c9 3000 	str.w	r3, [r9]
 800213a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800213e:	4606      	mov	r6, r0
 8002140:	460c      	mov	r4, r1
 8002142:	b112      	cbz	r2, 800214a <_printf_common+0x2a>
 8002144:	3301      	adds	r3, #1
 8002146:	f8c9 3000 	str.w	r3, [r9]
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	0699      	lsls	r1, r3, #26
 800214e:	bf42      	ittt	mi
 8002150:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002154:	3302      	addmi	r3, #2
 8002156:	f8c9 3000 	strmi.w	r3, [r9]
 800215a:	6825      	ldr	r5, [r4, #0]
 800215c:	f015 0506 	ands.w	r5, r5, #6
 8002160:	d107      	bne.n	8002172 <_printf_common+0x52>
 8002162:	f104 0a19 	add.w	sl, r4, #25
 8002166:	68e3      	ldr	r3, [r4, #12]
 8002168:	f8d9 2000 	ldr.w	r2, [r9]
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	429d      	cmp	r5, r3
 8002170:	db29      	blt.n	80021c6 <_printf_common+0xa6>
 8002172:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002176:	6822      	ldr	r2, [r4, #0]
 8002178:	3300      	adds	r3, #0
 800217a:	bf18      	it	ne
 800217c:	2301      	movne	r3, #1
 800217e:	0692      	lsls	r2, r2, #26
 8002180:	d42e      	bmi.n	80021e0 <_printf_common+0xc0>
 8002182:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002186:	4639      	mov	r1, r7
 8002188:	4630      	mov	r0, r6
 800218a:	47c0      	blx	r8
 800218c:	3001      	adds	r0, #1
 800218e:	d021      	beq.n	80021d4 <_printf_common+0xb4>
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	68e5      	ldr	r5, [r4, #12]
 8002194:	f8d9 2000 	ldr.w	r2, [r9]
 8002198:	f003 0306 	and.w	r3, r3, #6
 800219c:	2b04      	cmp	r3, #4
 800219e:	bf08      	it	eq
 80021a0:	1aad      	subeq	r5, r5, r2
 80021a2:	68a3      	ldr	r3, [r4, #8]
 80021a4:	6922      	ldr	r2, [r4, #16]
 80021a6:	bf0c      	ite	eq
 80021a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021ac:	2500      	movne	r5, #0
 80021ae:	4293      	cmp	r3, r2
 80021b0:	bfc4      	itt	gt
 80021b2:	1a9b      	subgt	r3, r3, r2
 80021b4:	18ed      	addgt	r5, r5, r3
 80021b6:	f04f 0900 	mov.w	r9, #0
 80021ba:	341a      	adds	r4, #26
 80021bc:	454d      	cmp	r5, r9
 80021be:	d11b      	bne.n	80021f8 <_printf_common+0xd8>
 80021c0:	2000      	movs	r0, #0
 80021c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021c6:	2301      	movs	r3, #1
 80021c8:	4652      	mov	r2, sl
 80021ca:	4639      	mov	r1, r7
 80021cc:	4630      	mov	r0, r6
 80021ce:	47c0      	blx	r8
 80021d0:	3001      	adds	r0, #1
 80021d2:	d103      	bne.n	80021dc <_printf_common+0xbc>
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021dc:	3501      	adds	r5, #1
 80021de:	e7c2      	b.n	8002166 <_printf_common+0x46>
 80021e0:	18e1      	adds	r1, r4, r3
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	2030      	movs	r0, #48	; 0x30
 80021e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021ea:	4422      	add	r2, r4
 80021ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021f4:	3302      	adds	r3, #2
 80021f6:	e7c4      	b.n	8002182 <_printf_common+0x62>
 80021f8:	2301      	movs	r3, #1
 80021fa:	4622      	mov	r2, r4
 80021fc:	4639      	mov	r1, r7
 80021fe:	4630      	mov	r0, r6
 8002200:	47c0      	blx	r8
 8002202:	3001      	adds	r0, #1
 8002204:	d0e6      	beq.n	80021d4 <_printf_common+0xb4>
 8002206:	f109 0901 	add.w	r9, r9, #1
 800220a:	e7d7      	b.n	80021bc <_printf_common+0x9c>

0800220c <_printf_i>:
 800220c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002210:	4617      	mov	r7, r2
 8002212:	7e0a      	ldrb	r2, [r1, #24]
 8002214:	b085      	sub	sp, #20
 8002216:	2a6e      	cmp	r2, #110	; 0x6e
 8002218:	4698      	mov	r8, r3
 800221a:	4606      	mov	r6, r0
 800221c:	460c      	mov	r4, r1
 800221e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002220:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002224:	f000 80bc 	beq.w	80023a0 <_printf_i+0x194>
 8002228:	d81a      	bhi.n	8002260 <_printf_i+0x54>
 800222a:	2a63      	cmp	r2, #99	; 0x63
 800222c:	d02e      	beq.n	800228c <_printf_i+0x80>
 800222e:	d80a      	bhi.n	8002246 <_printf_i+0x3a>
 8002230:	2a00      	cmp	r2, #0
 8002232:	f000 80c8 	beq.w	80023c6 <_printf_i+0x1ba>
 8002236:	2a58      	cmp	r2, #88	; 0x58
 8002238:	f000 808a 	beq.w	8002350 <_printf_i+0x144>
 800223c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002240:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002244:	e02a      	b.n	800229c <_printf_i+0x90>
 8002246:	2a64      	cmp	r2, #100	; 0x64
 8002248:	d001      	beq.n	800224e <_printf_i+0x42>
 800224a:	2a69      	cmp	r2, #105	; 0x69
 800224c:	d1f6      	bne.n	800223c <_printf_i+0x30>
 800224e:	6821      	ldr	r1, [r4, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002256:	d023      	beq.n	80022a0 <_printf_i+0x94>
 8002258:	1d11      	adds	r1, r2, #4
 800225a:	6019      	str	r1, [r3, #0]
 800225c:	6813      	ldr	r3, [r2, #0]
 800225e:	e027      	b.n	80022b0 <_printf_i+0xa4>
 8002260:	2a73      	cmp	r2, #115	; 0x73
 8002262:	f000 80b4 	beq.w	80023ce <_printf_i+0x1c2>
 8002266:	d808      	bhi.n	800227a <_printf_i+0x6e>
 8002268:	2a6f      	cmp	r2, #111	; 0x6f
 800226a:	d02a      	beq.n	80022c2 <_printf_i+0xb6>
 800226c:	2a70      	cmp	r2, #112	; 0x70
 800226e:	d1e5      	bne.n	800223c <_printf_i+0x30>
 8002270:	680a      	ldr	r2, [r1, #0]
 8002272:	f042 0220 	orr.w	r2, r2, #32
 8002276:	600a      	str	r2, [r1, #0]
 8002278:	e003      	b.n	8002282 <_printf_i+0x76>
 800227a:	2a75      	cmp	r2, #117	; 0x75
 800227c:	d021      	beq.n	80022c2 <_printf_i+0xb6>
 800227e:	2a78      	cmp	r2, #120	; 0x78
 8002280:	d1dc      	bne.n	800223c <_printf_i+0x30>
 8002282:	2278      	movs	r2, #120	; 0x78
 8002284:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002288:	496e      	ldr	r1, [pc, #440]	; (8002444 <_printf_i+0x238>)
 800228a:	e064      	b.n	8002356 <_printf_i+0x14a>
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002292:	1d11      	adds	r1, r2, #4
 8002294:	6019      	str	r1, [r3, #0]
 8002296:	6813      	ldr	r3, [r2, #0]
 8002298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800229c:	2301      	movs	r3, #1
 800229e:	e0a3      	b.n	80023e8 <_printf_i+0x1dc>
 80022a0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80022a4:	f102 0104 	add.w	r1, r2, #4
 80022a8:	6019      	str	r1, [r3, #0]
 80022aa:	d0d7      	beq.n	800225c <_printf_i+0x50>
 80022ac:	f9b2 3000 	ldrsh.w	r3, [r2]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da03      	bge.n	80022bc <_printf_i+0xb0>
 80022b4:	222d      	movs	r2, #45	; 0x2d
 80022b6:	425b      	negs	r3, r3
 80022b8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80022bc:	4962      	ldr	r1, [pc, #392]	; (8002448 <_printf_i+0x23c>)
 80022be:	220a      	movs	r2, #10
 80022c0:	e017      	b.n	80022f2 <_printf_i+0xe6>
 80022c2:	6820      	ldr	r0, [r4, #0]
 80022c4:	6819      	ldr	r1, [r3, #0]
 80022c6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80022ca:	d003      	beq.n	80022d4 <_printf_i+0xc8>
 80022cc:	1d08      	adds	r0, r1, #4
 80022ce:	6018      	str	r0, [r3, #0]
 80022d0:	680b      	ldr	r3, [r1, #0]
 80022d2:	e006      	b.n	80022e2 <_printf_i+0xd6>
 80022d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022d8:	f101 0004 	add.w	r0, r1, #4
 80022dc:	6018      	str	r0, [r3, #0]
 80022de:	d0f7      	beq.n	80022d0 <_printf_i+0xc4>
 80022e0:	880b      	ldrh	r3, [r1, #0]
 80022e2:	4959      	ldr	r1, [pc, #356]	; (8002448 <_printf_i+0x23c>)
 80022e4:	2a6f      	cmp	r2, #111	; 0x6f
 80022e6:	bf14      	ite	ne
 80022e8:	220a      	movne	r2, #10
 80022ea:	2208      	moveq	r2, #8
 80022ec:	2000      	movs	r0, #0
 80022ee:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80022f2:	6865      	ldr	r5, [r4, #4]
 80022f4:	60a5      	str	r5, [r4, #8]
 80022f6:	2d00      	cmp	r5, #0
 80022f8:	f2c0 809c 	blt.w	8002434 <_printf_i+0x228>
 80022fc:	6820      	ldr	r0, [r4, #0]
 80022fe:	f020 0004 	bic.w	r0, r0, #4
 8002302:	6020      	str	r0, [r4, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d13f      	bne.n	8002388 <_printf_i+0x17c>
 8002308:	2d00      	cmp	r5, #0
 800230a:	f040 8095 	bne.w	8002438 <_printf_i+0x22c>
 800230e:	4675      	mov	r5, lr
 8002310:	2a08      	cmp	r2, #8
 8002312:	d10b      	bne.n	800232c <_printf_i+0x120>
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	07da      	lsls	r2, r3, #31
 8002318:	d508      	bpl.n	800232c <_printf_i+0x120>
 800231a:	6923      	ldr	r3, [r4, #16]
 800231c:	6862      	ldr	r2, [r4, #4]
 800231e:	429a      	cmp	r2, r3
 8002320:	bfde      	ittt	le
 8002322:	2330      	movle	r3, #48	; 0x30
 8002324:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002328:	f105 35ff 	addle.w	r5, r5, #4294967295
 800232c:	ebae 0305 	sub.w	r3, lr, r5
 8002330:	6123      	str	r3, [r4, #16]
 8002332:	f8cd 8000 	str.w	r8, [sp]
 8002336:	463b      	mov	r3, r7
 8002338:	aa03      	add	r2, sp, #12
 800233a:	4621      	mov	r1, r4
 800233c:	4630      	mov	r0, r6
 800233e:	f7ff feef 	bl	8002120 <_printf_common>
 8002342:	3001      	adds	r0, #1
 8002344:	d155      	bne.n	80023f2 <_printf_i+0x1e6>
 8002346:	f04f 30ff 	mov.w	r0, #4294967295
 800234a:	b005      	add	sp, #20
 800234c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002350:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002354:	493c      	ldr	r1, [pc, #240]	; (8002448 <_printf_i+0x23c>)
 8002356:	6822      	ldr	r2, [r4, #0]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800235e:	f100 0504 	add.w	r5, r0, #4
 8002362:	601d      	str	r5, [r3, #0]
 8002364:	d001      	beq.n	800236a <_printf_i+0x15e>
 8002366:	6803      	ldr	r3, [r0, #0]
 8002368:	e002      	b.n	8002370 <_printf_i+0x164>
 800236a:	0655      	lsls	r5, r2, #25
 800236c:	d5fb      	bpl.n	8002366 <_printf_i+0x15a>
 800236e:	8803      	ldrh	r3, [r0, #0]
 8002370:	07d0      	lsls	r0, r2, #31
 8002372:	bf44      	itt	mi
 8002374:	f042 0220 	orrmi.w	r2, r2, #32
 8002378:	6022      	strmi	r2, [r4, #0]
 800237a:	b91b      	cbnz	r3, 8002384 <_printf_i+0x178>
 800237c:	6822      	ldr	r2, [r4, #0]
 800237e:	f022 0220 	bic.w	r2, r2, #32
 8002382:	6022      	str	r2, [r4, #0]
 8002384:	2210      	movs	r2, #16
 8002386:	e7b1      	b.n	80022ec <_printf_i+0xe0>
 8002388:	4675      	mov	r5, lr
 800238a:	fbb3 f0f2 	udiv	r0, r3, r2
 800238e:	fb02 3310 	mls	r3, r2, r0, r3
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002398:	4603      	mov	r3, r0
 800239a:	2800      	cmp	r0, #0
 800239c:	d1f5      	bne.n	800238a <_printf_i+0x17e>
 800239e:	e7b7      	b.n	8002310 <_printf_i+0x104>
 80023a0:	6808      	ldr	r0, [r1, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	6949      	ldr	r1, [r1, #20]
 80023a6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80023aa:	d004      	beq.n	80023b6 <_printf_i+0x1aa>
 80023ac:	1d10      	adds	r0, r2, #4
 80023ae:	6018      	str	r0, [r3, #0]
 80023b0:	6813      	ldr	r3, [r2, #0]
 80023b2:	6019      	str	r1, [r3, #0]
 80023b4:	e007      	b.n	80023c6 <_printf_i+0x1ba>
 80023b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80023ba:	f102 0004 	add.w	r0, r2, #4
 80023be:	6018      	str	r0, [r3, #0]
 80023c0:	6813      	ldr	r3, [r2, #0]
 80023c2:	d0f6      	beq.n	80023b2 <_printf_i+0x1a6>
 80023c4:	8019      	strh	r1, [r3, #0]
 80023c6:	2300      	movs	r3, #0
 80023c8:	6123      	str	r3, [r4, #16]
 80023ca:	4675      	mov	r5, lr
 80023cc:	e7b1      	b.n	8002332 <_printf_i+0x126>
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	1d11      	adds	r1, r2, #4
 80023d2:	6019      	str	r1, [r3, #0]
 80023d4:	6815      	ldr	r5, [r2, #0]
 80023d6:	6862      	ldr	r2, [r4, #4]
 80023d8:	2100      	movs	r1, #0
 80023da:	4628      	mov	r0, r5
 80023dc:	f7fd ff10 	bl	8000200 <memchr>
 80023e0:	b108      	cbz	r0, 80023e6 <_printf_i+0x1da>
 80023e2:	1b40      	subs	r0, r0, r5
 80023e4:	6060      	str	r0, [r4, #4]
 80023e6:	6863      	ldr	r3, [r4, #4]
 80023e8:	6123      	str	r3, [r4, #16]
 80023ea:	2300      	movs	r3, #0
 80023ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023f0:	e79f      	b.n	8002332 <_printf_i+0x126>
 80023f2:	6923      	ldr	r3, [r4, #16]
 80023f4:	462a      	mov	r2, r5
 80023f6:	4639      	mov	r1, r7
 80023f8:	4630      	mov	r0, r6
 80023fa:	47c0      	blx	r8
 80023fc:	3001      	adds	r0, #1
 80023fe:	d0a2      	beq.n	8002346 <_printf_i+0x13a>
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	079b      	lsls	r3, r3, #30
 8002404:	d507      	bpl.n	8002416 <_printf_i+0x20a>
 8002406:	2500      	movs	r5, #0
 8002408:	f104 0919 	add.w	r9, r4, #25
 800240c:	68e3      	ldr	r3, [r4, #12]
 800240e:	9a03      	ldr	r2, [sp, #12]
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	429d      	cmp	r5, r3
 8002414:	db05      	blt.n	8002422 <_printf_i+0x216>
 8002416:	68e0      	ldr	r0, [r4, #12]
 8002418:	9b03      	ldr	r3, [sp, #12]
 800241a:	4298      	cmp	r0, r3
 800241c:	bfb8      	it	lt
 800241e:	4618      	movlt	r0, r3
 8002420:	e793      	b.n	800234a <_printf_i+0x13e>
 8002422:	2301      	movs	r3, #1
 8002424:	464a      	mov	r2, r9
 8002426:	4639      	mov	r1, r7
 8002428:	4630      	mov	r0, r6
 800242a:	47c0      	blx	r8
 800242c:	3001      	adds	r0, #1
 800242e:	d08a      	beq.n	8002346 <_printf_i+0x13a>
 8002430:	3501      	adds	r5, #1
 8002432:	e7eb      	b.n	800240c <_printf_i+0x200>
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1a7      	bne.n	8002388 <_printf_i+0x17c>
 8002438:	780b      	ldrb	r3, [r1, #0]
 800243a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800243e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002442:	e765      	b.n	8002310 <_printf_i+0x104>
 8002444:	080026d2 	.word	0x080026d2
 8002448:	080026c1 	.word	0x080026c1

0800244c <memcpy>:
 800244c:	b510      	push	{r4, lr}
 800244e:	1e43      	subs	r3, r0, #1
 8002450:	440a      	add	r2, r1
 8002452:	4291      	cmp	r1, r2
 8002454:	d100      	bne.n	8002458 <memcpy+0xc>
 8002456:	bd10      	pop	{r4, pc}
 8002458:	f811 4b01 	ldrb.w	r4, [r1], #1
 800245c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002460:	e7f7      	b.n	8002452 <memcpy+0x6>

08002462 <memmove>:
 8002462:	4288      	cmp	r0, r1
 8002464:	b510      	push	{r4, lr}
 8002466:	eb01 0302 	add.w	r3, r1, r2
 800246a:	d803      	bhi.n	8002474 <memmove+0x12>
 800246c:	1e42      	subs	r2, r0, #1
 800246e:	4299      	cmp	r1, r3
 8002470:	d10c      	bne.n	800248c <memmove+0x2a>
 8002472:	bd10      	pop	{r4, pc}
 8002474:	4298      	cmp	r0, r3
 8002476:	d2f9      	bcs.n	800246c <memmove+0xa>
 8002478:	1881      	adds	r1, r0, r2
 800247a:	1ad2      	subs	r2, r2, r3
 800247c:	42d3      	cmn	r3, r2
 800247e:	d100      	bne.n	8002482 <memmove+0x20>
 8002480:	bd10      	pop	{r4, pc}
 8002482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002486:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800248a:	e7f7      	b.n	800247c <memmove+0x1a>
 800248c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002490:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002494:	e7eb      	b.n	800246e <memmove+0xc>
	...

08002498 <_free_r>:
 8002498:	b538      	push	{r3, r4, r5, lr}
 800249a:	4605      	mov	r5, r0
 800249c:	2900      	cmp	r1, #0
 800249e:	d045      	beq.n	800252c <_free_r+0x94>
 80024a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024a4:	1f0c      	subs	r4, r1, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bfb8      	it	lt
 80024aa:	18e4      	addlt	r4, r4, r3
 80024ac:	f000 f8d6 	bl	800265c <__malloc_lock>
 80024b0:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <_free_r+0x98>)
 80024b2:	6813      	ldr	r3, [r2, #0]
 80024b4:	4610      	mov	r0, r2
 80024b6:	b933      	cbnz	r3, 80024c6 <_free_r+0x2e>
 80024b8:	6063      	str	r3, [r4, #4]
 80024ba:	6014      	str	r4, [r2, #0]
 80024bc:	4628      	mov	r0, r5
 80024be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024c2:	f000 b8cc 	b.w	800265e <__malloc_unlock>
 80024c6:	42a3      	cmp	r3, r4
 80024c8:	d90c      	bls.n	80024e4 <_free_r+0x4c>
 80024ca:	6821      	ldr	r1, [r4, #0]
 80024cc:	1862      	adds	r2, r4, r1
 80024ce:	4293      	cmp	r3, r2
 80024d0:	bf04      	itt	eq
 80024d2:	681a      	ldreq	r2, [r3, #0]
 80024d4:	685b      	ldreq	r3, [r3, #4]
 80024d6:	6063      	str	r3, [r4, #4]
 80024d8:	bf04      	itt	eq
 80024da:	1852      	addeq	r2, r2, r1
 80024dc:	6022      	streq	r2, [r4, #0]
 80024de:	6004      	str	r4, [r0, #0]
 80024e0:	e7ec      	b.n	80024bc <_free_r+0x24>
 80024e2:	4613      	mov	r3, r2
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	b10a      	cbz	r2, 80024ec <_free_r+0x54>
 80024e8:	42a2      	cmp	r2, r4
 80024ea:	d9fa      	bls.n	80024e2 <_free_r+0x4a>
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	1858      	adds	r0, r3, r1
 80024f0:	42a0      	cmp	r0, r4
 80024f2:	d10b      	bne.n	800250c <_free_r+0x74>
 80024f4:	6820      	ldr	r0, [r4, #0]
 80024f6:	4401      	add	r1, r0
 80024f8:	1858      	adds	r0, r3, r1
 80024fa:	4282      	cmp	r2, r0
 80024fc:	6019      	str	r1, [r3, #0]
 80024fe:	d1dd      	bne.n	80024bc <_free_r+0x24>
 8002500:	6810      	ldr	r0, [r2, #0]
 8002502:	6852      	ldr	r2, [r2, #4]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	4401      	add	r1, r0
 8002508:	6019      	str	r1, [r3, #0]
 800250a:	e7d7      	b.n	80024bc <_free_r+0x24>
 800250c:	d902      	bls.n	8002514 <_free_r+0x7c>
 800250e:	230c      	movs	r3, #12
 8002510:	602b      	str	r3, [r5, #0]
 8002512:	e7d3      	b.n	80024bc <_free_r+0x24>
 8002514:	6820      	ldr	r0, [r4, #0]
 8002516:	1821      	adds	r1, r4, r0
 8002518:	428a      	cmp	r2, r1
 800251a:	bf04      	itt	eq
 800251c:	6811      	ldreq	r1, [r2, #0]
 800251e:	6852      	ldreq	r2, [r2, #4]
 8002520:	6062      	str	r2, [r4, #4]
 8002522:	bf04      	itt	eq
 8002524:	1809      	addeq	r1, r1, r0
 8002526:	6021      	streq	r1, [r4, #0]
 8002528:	605c      	str	r4, [r3, #4]
 800252a:	e7c7      	b.n	80024bc <_free_r+0x24>
 800252c:	bd38      	pop	{r3, r4, r5, pc}
 800252e:	bf00      	nop
 8002530:	200000a0 	.word	0x200000a0

08002534 <_malloc_r>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	1ccd      	adds	r5, r1, #3
 8002538:	f025 0503 	bic.w	r5, r5, #3
 800253c:	3508      	adds	r5, #8
 800253e:	2d0c      	cmp	r5, #12
 8002540:	bf38      	it	cc
 8002542:	250c      	movcc	r5, #12
 8002544:	2d00      	cmp	r5, #0
 8002546:	4606      	mov	r6, r0
 8002548:	db01      	blt.n	800254e <_malloc_r+0x1a>
 800254a:	42a9      	cmp	r1, r5
 800254c:	d903      	bls.n	8002556 <_malloc_r+0x22>
 800254e:	230c      	movs	r3, #12
 8002550:	6033      	str	r3, [r6, #0]
 8002552:	2000      	movs	r0, #0
 8002554:	bd70      	pop	{r4, r5, r6, pc}
 8002556:	f000 f881 	bl	800265c <__malloc_lock>
 800255a:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <_malloc_r+0xb4>)
 800255c:	6814      	ldr	r4, [r2, #0]
 800255e:	4621      	mov	r1, r4
 8002560:	b991      	cbnz	r1, 8002588 <_malloc_r+0x54>
 8002562:	4c22      	ldr	r4, [pc, #136]	; (80025ec <_malloc_r+0xb8>)
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	b91b      	cbnz	r3, 8002570 <_malloc_r+0x3c>
 8002568:	4630      	mov	r0, r6
 800256a:	f000 f867 	bl	800263c <_sbrk_r>
 800256e:	6020      	str	r0, [r4, #0]
 8002570:	4629      	mov	r1, r5
 8002572:	4630      	mov	r0, r6
 8002574:	f000 f862 	bl	800263c <_sbrk_r>
 8002578:	1c43      	adds	r3, r0, #1
 800257a:	d126      	bne.n	80025ca <_malloc_r+0x96>
 800257c:	230c      	movs	r3, #12
 800257e:	6033      	str	r3, [r6, #0]
 8002580:	4630      	mov	r0, r6
 8002582:	f000 f86c 	bl	800265e <__malloc_unlock>
 8002586:	e7e4      	b.n	8002552 <_malloc_r+0x1e>
 8002588:	680b      	ldr	r3, [r1, #0]
 800258a:	1b5b      	subs	r3, r3, r5
 800258c:	d41a      	bmi.n	80025c4 <_malloc_r+0x90>
 800258e:	2b0b      	cmp	r3, #11
 8002590:	d90f      	bls.n	80025b2 <_malloc_r+0x7e>
 8002592:	600b      	str	r3, [r1, #0]
 8002594:	50cd      	str	r5, [r1, r3]
 8002596:	18cc      	adds	r4, r1, r3
 8002598:	4630      	mov	r0, r6
 800259a:	f000 f860 	bl	800265e <__malloc_unlock>
 800259e:	f104 000b 	add.w	r0, r4, #11
 80025a2:	1d23      	adds	r3, r4, #4
 80025a4:	f020 0007 	bic.w	r0, r0, #7
 80025a8:	1ac3      	subs	r3, r0, r3
 80025aa:	d01b      	beq.n	80025e4 <_malloc_r+0xb0>
 80025ac:	425a      	negs	r2, r3
 80025ae:	50e2      	str	r2, [r4, r3]
 80025b0:	bd70      	pop	{r4, r5, r6, pc}
 80025b2:	428c      	cmp	r4, r1
 80025b4:	bf0d      	iteet	eq
 80025b6:	6863      	ldreq	r3, [r4, #4]
 80025b8:	684b      	ldrne	r3, [r1, #4]
 80025ba:	6063      	strne	r3, [r4, #4]
 80025bc:	6013      	streq	r3, [r2, #0]
 80025be:	bf18      	it	ne
 80025c0:	460c      	movne	r4, r1
 80025c2:	e7e9      	b.n	8002598 <_malloc_r+0x64>
 80025c4:	460c      	mov	r4, r1
 80025c6:	6849      	ldr	r1, [r1, #4]
 80025c8:	e7ca      	b.n	8002560 <_malloc_r+0x2c>
 80025ca:	1cc4      	adds	r4, r0, #3
 80025cc:	f024 0403 	bic.w	r4, r4, #3
 80025d0:	42a0      	cmp	r0, r4
 80025d2:	d005      	beq.n	80025e0 <_malloc_r+0xac>
 80025d4:	1a21      	subs	r1, r4, r0
 80025d6:	4630      	mov	r0, r6
 80025d8:	f000 f830 	bl	800263c <_sbrk_r>
 80025dc:	3001      	adds	r0, #1
 80025de:	d0cd      	beq.n	800257c <_malloc_r+0x48>
 80025e0:	6025      	str	r5, [r4, #0]
 80025e2:	e7d9      	b.n	8002598 <_malloc_r+0x64>
 80025e4:	bd70      	pop	{r4, r5, r6, pc}
 80025e6:	bf00      	nop
 80025e8:	200000a0 	.word	0x200000a0
 80025ec:	200000a4 	.word	0x200000a4

080025f0 <_realloc_r>:
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f2:	4607      	mov	r7, r0
 80025f4:	4614      	mov	r4, r2
 80025f6:	460e      	mov	r6, r1
 80025f8:	b921      	cbnz	r1, 8002604 <_realloc_r+0x14>
 80025fa:	4611      	mov	r1, r2
 80025fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002600:	f7ff bf98 	b.w	8002534 <_malloc_r>
 8002604:	b922      	cbnz	r2, 8002610 <_realloc_r+0x20>
 8002606:	f7ff ff47 	bl	8002498 <_free_r>
 800260a:	4625      	mov	r5, r4
 800260c:	4628      	mov	r0, r5
 800260e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002610:	f000 f826 	bl	8002660 <_malloc_usable_size_r>
 8002614:	4284      	cmp	r4, r0
 8002616:	d90f      	bls.n	8002638 <_realloc_r+0x48>
 8002618:	4621      	mov	r1, r4
 800261a:	4638      	mov	r0, r7
 800261c:	f7ff ff8a 	bl	8002534 <_malloc_r>
 8002620:	4605      	mov	r5, r0
 8002622:	2800      	cmp	r0, #0
 8002624:	d0f2      	beq.n	800260c <_realloc_r+0x1c>
 8002626:	4631      	mov	r1, r6
 8002628:	4622      	mov	r2, r4
 800262a:	f7ff ff0f 	bl	800244c <memcpy>
 800262e:	4631      	mov	r1, r6
 8002630:	4638      	mov	r0, r7
 8002632:	f7ff ff31 	bl	8002498 <_free_r>
 8002636:	e7e9      	b.n	800260c <_realloc_r+0x1c>
 8002638:	4635      	mov	r5, r6
 800263a:	e7e7      	b.n	800260c <_realloc_r+0x1c>

0800263c <_sbrk_r>:
 800263c:	b538      	push	{r3, r4, r5, lr}
 800263e:	4c06      	ldr	r4, [pc, #24]	; (8002658 <_sbrk_r+0x1c>)
 8002640:	2300      	movs	r3, #0
 8002642:	4605      	mov	r5, r0
 8002644:	4608      	mov	r0, r1
 8002646:	6023      	str	r3, [r4, #0]
 8002648:	f7ff fb64 	bl	8001d14 <_sbrk>
 800264c:	1c43      	adds	r3, r0, #1
 800264e:	d102      	bne.n	8002656 <_sbrk_r+0x1a>
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	b103      	cbz	r3, 8002656 <_sbrk_r+0x1a>
 8002654:	602b      	str	r3, [r5, #0]
 8002656:	bd38      	pop	{r3, r4, r5, pc}
 8002658:	20000140 	.word	0x20000140

0800265c <__malloc_lock>:
 800265c:	4770      	bx	lr

0800265e <__malloc_unlock>:
 800265e:	4770      	bx	lr

08002660 <_malloc_usable_size_r>:
 8002660:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002664:	2800      	cmp	r0, #0
 8002666:	f1a0 0004 	sub.w	r0, r0, #4
 800266a:	bfbc      	itt	lt
 800266c:	580b      	ldrlt	r3, [r1, r0]
 800266e:	18c0      	addlt	r0, r0, r3
 8002670:	4770      	bx	lr
	...

08002674 <_init>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	bf00      	nop
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr

08002680 <_fini>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	bf00      	nop
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr
